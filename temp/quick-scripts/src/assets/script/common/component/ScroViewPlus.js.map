{"version":3,"sources":["assets/script/common/component/ScroViewPlus.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import ScroViewPlusItem from \"./ScroViewPlusItem\";\n\nconst { ccclass, property } = cc._decorator;\n\n/**\n * 用法：\n *\n *      1. 将本组件挂载在节点上即可，和正常ScrollView使用一致\n *\n * 原理：\n *\n *      1. 滚动时，判断子节点是否进入了/离开了可视区域\n *      2. 根据结果回调对应事件，在可以实现类似以下功能：\n *          * 控制可视区域Item显示（透明度改为 255 ），非可视区域Item隐藏（透明度改为 0 ）\n */\n@ccclass\nexport default class ScroViewPlus extends cc.ScrollView {\n    @property({\n        tooltip: \"是否计算在可视区域中Item的相对位置（可能会相对耗性能）\"\n    })\n    caculatePosition: boolean = false;\n\n    onEnable() {\n        super.onEnable();\n        this.node.on(\"scrolling\", this._onScrollingDrawCallOpt, this);\n    }\n\n    onDisable() {\n        super.onDisable();\n        this.node.off(\"scrolling\", this._onScrollingDrawCallOpt, this);\n    }\n\n    private _onScrollingDrawCallOpt() {\n        if (this.content.childrenCount == 0) {\n            return;\n        }\n        this.optDc();\n    }\n\n    public optDc() {\n        ScroViewPlus.optDc(this, this.caculatePosition);\n    }\n\n    /**\n     * 优化 ScrollView Content 节点 DC，可以手动调用\n     *\n     * 具体为\n     *\n     * 1. 进入ScrollView可视区域是，回调对应 Content 子节点上挂载的 ScollViewPlusItem 组件的 onEnterScorllViewEvents 数组事件\n     * 2. 退出ScrollView可视区域是，回调对应 Content 子节点上挂载的 ScollViewPlusItem 组件的 onExitScorllViewEvents 数组事件\n     */\n    public static optDc(scrollView: cc.ScrollView, caculatePosition: boolean) {\n        // 获取 ScrollView Node 的左下角坐标在世界坐标系中的坐标\n        let svLeftBottomPoint: cc.Vec2 = scrollView.node.parent.convertToWorldSpaceAR(\n            cc.v2(\n                scrollView.node.x - scrollView.node.anchorX * scrollView.node.width,\n                scrollView.node.y - scrollView.node.anchorY * scrollView.node.height\n            )\n        );\n\n        // 求出 ScrollView 可视区域在世界坐标系中的矩形（碰撞盒）\n        let svBBoxRect: cc.Rect = cc.rect(svLeftBottomPoint.x, svLeftBottomPoint.y, scrollView.node.width, scrollView.node.height);\n\n        // 遍历 ScrollView Content 内容节点的子节点，对每个子节点的包围盒做和 ScrollView 可视区域包围盒做碰撞判断\n        scrollView.content.children.forEach((childNode: cc.Node) => {\n            // 没有绑定指定组件的子节点不处理\n            let itemComponent = childNode.getComponent(ScroViewPlusItem);\n            if (itemComponent == null) {\n                return;\n            }\n\n            // 如果相交了，那么就显示，否则就隐藏\n            let childNodeBBox = childNode.getBoundingBoxToWorld();\n            if (childNodeBBox.intersects(svBBoxRect)) {\n                if (!itemComponent.isShowing) {\n                    itemComponent.isShowing = true;\n                    itemComponent.publishOnEnterScrollView();\n                }\n                if (caculatePosition) {\n                    if (itemComponent.isShowing) {\n                        itemComponent.publishOnPositionChange(\n                            (childNodeBBox.x - (svBBoxRect.x - childNodeBBox.width / 2)) / (childNodeBBox.width + svBBoxRect.width),\n                            (childNodeBBox.y - (svBBoxRect.y - childNodeBBox.height / 2)) / (childNodeBBox.height + svBBoxRect.height)\n                        );\n                    }\n                }\n            } else {\n                if (itemComponent.isShowing) {\n                    itemComponent.isShowing = false;\n                    itemComponent.publishOnExitScrollView();\n                }\n            }\n        });\n    }\n}\n"]}