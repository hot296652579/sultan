{"version":3,"sources":["assets/script/framework/net/ServerConnector.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import WebSocketClinet from \"./WebSocketClient\";\nimport { Message } from \"./Message\";\nimport PanelHelp from \"../../msgbox/PanelHelp\";\n/**\n * @description 服务器连接器\n */\n\nexport class ServerConnector {\n\n    /**\n     * @description websocket实例由外部设置方可使用\n     */\n    private _wsClient: WebSocketClinet = null;\n\n    constructor() {\n        this._wsClient = new WebSocketClinet();\n        this._wsClient.onClose = this.onClose.bind(this);\n        this._wsClient.onError = this.onError.bind(this);\n        this._wsClient.onMessage = this.onMessage.bind(this);\n        this._wsClient.onOpen = this.onOpen.bind(this);\n    }\n\n    /**\n     * @description 发送心跳\n     */\n    protected sendHeartbeat() {\n        if (CC_DEBUG) cc.error(`请重写sendHeartbeat`);\n    }\n\n    /**\n     * @description 获取最大心跳超时的次数\n     */\n    protected getMaxHeartbeatTimeOut(): number {\n        //默认给5次\n        return 5;\n    }\n\n    /**@description 心跳发送间隔，默认为3秒 */\n    protected getHeartbeatInterval(): number {\n        return 3000;\n    }\n\n    /**\n     * @description 心跳超时\n     */\n    protected onHeartbeatTimeOut() {\n        //do noting\n        cc.error('server heartbeat timeout');\n    }\n\n    /**\n     * @description 是否为心跳消息\n     */\n    protected isHeartBeat(data: Message): boolean {\n        return false;\n    }\n\n    /**\n     * @description 网络打开\n     */\n    protected onOpen() {\n        G.Logger.log('网络打开');\n        this._curRecvHartTimeOutCount = 0;\n        this.startSendHartSchedule();\n    }\n\n    /**\n     * @description 网络关闭\n     */\n    protected onClose(ev: Event) {\n        //停止心跳发送，已经没有意义\n        G.Logger.log('网络关闭', ev);\n        this.stopSendHartSchedule();\n    }\n\n    /**\n     * @description 网络错误\n     */\n    protected onError(ev: Event) {\n        //网络连接出错误，停止心跳发送\n        G.Logger.log('网络错误', ev);\n\n        this.stopSendHartSchedule();\n    }\n\n    /**\n     * @description 收到网络消息\n     */\n    protected onMessage(data: Uint8Array) {\n        // G.Logger.log('收到网络消息',data);\n        this.recvHeartbeat();\n    }\n\n    /**\n     * @description 收到心跳\n     */\n    protected recvHeartbeat() {\n        this._curRecvHartTimeOutCount = 0;\n    }\n\n    private _sendHartId: NodeJS.Timeout; //发送心跳包的间隔id\n    private _curRecvHartTimeOutCount: number = 0;//当前接收心跳超时的次数\n\n    /**\n     * @description 连接网络\n     * @param ip \n     * @param port \n     * @param protocol 协议类型 ws / wss \n     */\n    public connect(ip: string, port: number | string = null, protocol: string = \"ws\") {\n        // if (!protocol) {\n        //     protocol = \"ws\";\n        // }\n\n        if (window.location.protocol === \"https:\") {\n            protocol = \"wss\";\n        } else {\n            protocol = \"ws\";\n        }\n\n        if (port) {\n            if (typeof port == \"string\" && port.length > 0) {\n                this._wsClient && this._wsClient.initWebSocket(ip, port, protocol);\n            } else if (typeof port == \"number\" && port > 0) {\n                this._wsClient && this._wsClient.initWebSocket(ip, port.toString(), protocol);\n            } else {\n                this._wsClient && this._wsClient.initWebSocket(ip, null, protocol);\n            }\n        } else {\n            this._wsClient && this._wsClient.initWebSocket(ip, null, protocol);\n        }\n    }\n\n    /**\n     * @description 清除定时发送心跳的定时器id\n     */\n    protected stopSendHartSchedule() {\n        if (this._sendHartId) {\n            clearInterval(this._sendHartId);\n            this._sendHartId = null;\n        }\n    }\n\n    /**\n     * @description 启动心跳发送\n     */\n    protected startSendHartSchedule() {\n        this.stopSendHartSchedule();\n        this.sendHeartbeat();\n        this._sendHartId = setInterval(() => {\n            this._curRecvHartTimeOutCount = this._curRecvHartTimeOutCount + 1;\n            if (this._curRecvHartTimeOutCount > this.getMaxHeartbeatTimeOut()) {\n                this.stopSendHartSchedule();\n                this.onHeartbeatTimeOut();\n                return;\n            }\n            this.sendHeartbeat();\n        }, this.getHeartbeatInterval());\n    }\n\n\n\n    /**\n     * @description 发送请求\n     * @param msg 消息\n     */\n    public send(msg: Message) {\n        this._wsClient && this._wsClient.send(msg.buffer);\n    }\n\n    public close() {\n        this.stopSendHartSchedule();\n        this._wsClient && this._wsClient.close();\n    }\n}"]}