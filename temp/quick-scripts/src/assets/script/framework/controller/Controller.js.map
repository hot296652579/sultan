{"version":3,"sources":["assets/script/framework/controller/Controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,gDAA6C;AAC7C,4EAAoD;AAKpD;;GAEG;AAEH,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC;AAQ5C,IAAqB,UAAU,GAA/B,MAAqB,UAAwB,SAAQ,wBAAc;IAE/D;;OAEG;IACH,IAAW,OAAO;QACd,OAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAAA,CAAC;IACF,IAAW,OAAO,CAAE,KAAmB;QACnC,IAAI,CAAC,QAAQ,GAAQ,KAAK,CAAC;IAC/B,CAAC;IAES,aAAa;QACnB,KAAK,CAAC,aAAa,EAAE,CAAC;QACtB,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,QAAQ,CAAC,OAAO,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7D,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/D,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnE,CAAC;IAES,SAAS;QACf,IAAK,QAAQ;YAAG,EAAE,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAC1D,CAAC;IAES,UAAU,CAAE,EAAE;QACpB,IAAK,QAAQ;YAAG,EAAE,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;IAC3D,CAAC;IACS,UAAU,CAAE,EAAU;QAC5B,IAAK,QAAQ;YAAG,EAAE,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;IAC3D,CAAC;CAEJ,CAAA;AA9BoB,UAAU;IAD9B,OAAO;GACa,UAAU,CA8B9B;kBA9BoB,UAAU","file":"","sourceRoot":"/","sourcesContent":["\nimport { EventApi } from \"../event/EventApi\";\nimport EventComponent from \"../base/EventComponent\";\nimport { Config } from \"../../common/config/Config\";\nimport PanelHelp from \"../../msgbox/PanelHelp\";\nimport { Manager } from \"../../common/manager/Manager\";\n\n/**\n * @description 控制器基类 , 对service 的自动注入\n */\n\nconst { ccclass, property } = cc._decorator;\n\n/**@description 控制器接口,在UIView中注入Service时必须实现 */\nexport interface IController<ServiceType>{\n    service : ServiceType;\n}\n\n@ccclass\nexport default class Controller<ServiceType> extends EventComponent {\n\n    /**\n     * @description 这个变量会在脚本onLoad时自动赋值，使用者请勿进行修改\n     */\n    public get service() : ServiceType{\n        return <any>(this._service);\n    };\n    public set service( value : ServiceType ) {\n        this._service = <any>value;\n    }\n\n    protected bindingEvents(){\n        super.bindingEvents();\n        this.registerEvent(EventApi.NetEvent.ON_OPEN,this.onNetOpen);\n        this.registerEvent(EventApi.NetEvent.ON_CLOSE,this.onNetClose);\n        this.registerEvent(EventApi.NetEvent.ON_ERROR,this.onNetError);\n    }\n\n    protected onNetOpen() {\n        if ( CC_DEBUG ) cc.log(`--Controller-- onNetOpen---`);\n    }\n    \n    protected onNetClose( ev ) {\n        if ( CC_DEBUG ) cc.log(`--Controller-- onNetClose---`);\n    }\n    protected onNetError( ev : Event ) {\n        if ( CC_DEBUG ) cc.log(`--Controller-- onNetError---`);\n    }\n\n}\n"]}