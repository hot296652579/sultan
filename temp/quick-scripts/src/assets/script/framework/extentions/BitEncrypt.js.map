{"version":3,"sources":["assets/script/framework/extentions/BitEncrypt.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\n/**\n * @description 位加密,不增加数据本身大小进行位置加密\n */\n\nclass _BitEncrypt {\n\n    private readonly logTag = `[BitEncrypt]:`;\n    private _encryptKey: string = \"EskKbMvzZBILhcTv\";\n    public set encryptKey( value : string ){\n        this._encryptKey = value;\n    }\n    /**@description 加密解密 密钥 */\n    public get encryptKey( ){\n        return this._encryptKey;\n    }\n    /**\n     * @description 解密\n     * @param content 加密的内容\n     * @param key 解密的key 加密/解密的key保持一致，如果不传可通过设置encryptKey\n     */\n    public decode(content: string, key?: string): string {\n        return this._code(content, key);\n    }\n\n    /**\n     * @description 加密\n     * @param content 未加密内容\n     * @param key 加密的key 加密/解密的key保持一致 如果不传可通过设置encryptKey\n     */\n    public encode(content: string, key?: string): string {\n        return this._code(content, key);\n    }\n\n    private _code(content: string, key: string): string {\n        let result = this._check(content,key);\n        if ( result.isOK ){\n\n            let contentCharCode : number[] = [];\n            for( let i = 0 ; i < content.length ; i++ ){\n                contentCharCode.push(content.charCodeAt(i));\n            }\n            \n            let index = 0;\n            let ch = \"\";\n            //对中文，及以下的其它字符串进行位加密\n            let regex = /[\\w\\d_-`~#!$%^&*(){}=+;:'\"<,>,/?|\\\\\\u4e00-\\u9fa5]/g;\n            for ( let i = 0 ; i < contentCharCode.length ; i++ ){\n\n                //只有子母，数字，\n                let matchs = content[i].match(regex);\n                if ( matchs && matchs.length > 0 ){\n                    //替换字符\n                    contentCharCode[i] ^= result.key.charCodeAt(index);\n                    ch = String.fromCharCode(contentCharCode[i]);\n                    matchs = ch.match(regex);\n                    if ( matchs && matchs.length ){\n                        //转换后仍然是可显示字符\n                    }else{\n                        //转成了不能显示的字符，把它恢复原样\n                        contentCharCode[i] ^= result.key.charCodeAt(index);\n                    }\n    \n                    index++;\n                    if ( index >= result.key.length ){\n                        index = 0;\n                    }\n                }else{\n                    //不替换字符\n                }\n            }\n\n            let newContent = \"\";\n            for ( let i = 0 ; i < contentCharCode.length ; i++ ){\n                newContent += String.fromCharCode(contentCharCode[i]);\n            }\n            return newContent;\n\n        }else{\n            if (CC_DEBUG) cc.error(BitEncrypt.logTag, `encode/decode error content : ${content} key : ${key}`);\n            return content;\n        }\n    }\n\n    private _check( content : string , key : string ) : {isOK : boolean, key : string } {\n        if (content && content.length > 0 ) {\n            if ( key && key.length > 0 ){\n                //使用传的key进行加解密\n                return { isOK : true , key : key };\n            }else{\n                if ( this.encryptKey && this.encryptKey.length > 0 ){\n                    return { isOK : true , key : this.encryptKey };\n                }else{\n                    return { isOK : false , key : key };\n                }\n            }\n        } else {\n            return { isOK :  false , key : key };\n        }\n    }\n}\n\nexport let BitEncrypt = new _BitEncrypt();\n//window[`BitEncrypt`] = BitEncrypt;"]}