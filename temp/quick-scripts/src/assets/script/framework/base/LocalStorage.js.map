{"version":3,"sources":["assets/script/framework/base/LocalStorage.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;GAOG;AACH,yDAAsD;AAYtD,MAAa,YAAY;IAAzB;QAKW,QAAG,GAAG,kBAAkB,CAAC;IA6EpC,CAAC;IA/EU,MAAM,CAAC,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;IAG5F,iCAAiC;IAEjC,QAAQ;IACA,OAAO,CAAC,GAAO;QACnB,+BAA+B;QAC/B,sBAAsB;QACtB,OAAO,uBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QACxD,iCAAiC;QACjC,kCAAkC;QAClC,gDAAgD;QAChD,8CAA8C;QAC9C,6CAA6C;QAC7C,wHAAwH;QACxH,0CAA0C;IAC9C,CAAC;IAEO,UAAU,CAAC,IAAI;QACnB,OAAO,uBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QACzC,iCAAiC;QACjC,gDAAgD;QAChD,8CAA8C;QAC9C,uDAAuD;QACvD,8DAA8D;QAC9D,sHAAsH;QACtH,2DAA2D;QAC3D,kCAAkC;IACtC,CAAC;IAEM,OAAO,CAAC,GAAW,EAAE,eAAoB,IAAI;QAChD,IAAI,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,KAAK,EAAE;YACP,IAAI;YACJ,IAAI;gBACA,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAClC,IAAI,MAAM,GAAgB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC3C,IAAI,MAAM,CAAC,IAAI,EAAE;oBACb,OAAO,MAAM,CAAC,KAAK,CAAC;iBACvB;qBAAM;oBACH,OAAO,KAAK,CAAC;iBAChB;aACJ;YAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,KAAK,CAAC;aAChB;SACJ;aACI;YACD,OAAO,YAAY,CAAC;SACvB;IACL,CAAC;IAEM,OAAO,CAAC,GAAW,EAAE,KAAyC;QAEjE,IAAI,IAAI,GAAG,OAAO,KAAK,CAAC;QACxB,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,SAAS,IAAI,IAAI,IAAI,QAAQ,EAAE;YAC/E,IAAI,OAAO,GAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;YACxD,IAAI;YACJ,IAAI;gBACA,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACjC,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;aAC1C;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,QAAQ;oBAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACjC;SACJ;aAAM;YACH,IAAI,QAAQ;gBAAE,EAAE,CAAC,KAAK,CAAC,sBAAsB,IAAI,EAAE,CAAC,CAAC;SACxD;IACL,CAAC;IAEM,UAAU,CAAC,GAAW;QACzB,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;IACD;;OAEG;IACH,eAAe;QACX,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;QACtC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;;AAjFL,oCAkFC;AAhFkB,sBAAS,GAAiB,IAAI,CAAC","file":"","sourceRoot":"/","sourcesContent":["/*\n * @Author: your name\n * @Date: 2019-11-20 19:04:21\n * @LastEditTime: 2020-04-10 13:38:50\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: \\ddz\\assets\\framework\\base\\LocalStorage.ts\n */\nimport { BitEncrypt } from \"../extentions/BitEncrypt\";\n\n/**\n * @description 本地数据存储，为了后面可能需要对数据进入加密保存等，把cocos的封闭一层\n */\n\ntype StorageVauleType = \"number\" | \"string\" | \"boolean\" | \"object\";\ninterface StorageData {\n    type: StorageVauleType,\n    value: string | number | boolean | object;\n}\n\nexport class LocalStorage {\n\n    private static _instance: LocalStorage = null;\n    public static Instance() { return this._instance || (this._instance = new LocalStorage()); }\n\n    public key = \"VuxiAKihQ0VR9WRe\";\n    //public iv = \"Zqk3jEvujfeRIY9j\";\n\n    //aes加密 \n    private encrypt(obj: {}) {\n        //些加载出来的数据太过庞大,可能造成浏览器无法缓存太多数据，\n        //使用新的加密方法,不会增加数据本身的大小\n        return BitEncrypt.encode(JSON.stringify(obj), this.key);\n        // let _CryptoJS: any = CryptoJS;\n        // let word = JSON.stringify(obj);\n        // let key = _CryptoJS.enc.Utf8.parse(this.key);\n        // let iv = _CryptoJS.enc.Utf8.parse(this.iv);\n        // let srcs = _CryptoJS.enc.Utf8.parse(word);\n        // let encrypted = _CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: _CryptoJS.mode.CBC, padding: _CryptoJS.pad.Pkcs7 });\n        // return encrypted.ciphertext.toString();\n    }\n\n    private decryption(word) {\n        return BitEncrypt.decode(word, this.key);\n        // let _CryptoJS: any = CryptoJS;\n        // let key = _CryptoJS.enc.Utf8.parse(this.key);\n        // let iv = _CryptoJS.enc.Utf8.parse(this.iv);\n        // let encryptedHexStr = _CryptoJS.enc.Hex.parse(word);\n        // let srcs = _CryptoJS.enc.Base64.stringify(encryptedHexStr);\n        // let decrypt = _CryptoJS.AES.decrypt(srcs, key, { iv: iv, mode: _CryptoJS.mode.CBC, padding: _CryptoJS.pad.Pkcs7 });\n        // let decryptedStr = decrypt.toString(_CryptoJS.enc.Utf8);\n        // return decryptedStr.toString();\n    }\n\n    public getItem(key: string, defaultValue: any = null) {\n        let value = cc.sys.localStorage.getItem(key);\n        if (value) {\n            //解析\n            try {\n                let data = this.decryption(value);\n                let result: StorageData = JSON.parse(data);\n                if (result.type) {\n                    return result.value;\n                } else {\n                    return value;\n                }\n            } catch (error) {\n                return value;\n            }\n        }\n        else {\n            return defaultValue;\n        }\n    }\n\n    public setItem(key: string, value: string | number | boolean | object) {\n\n        let type = typeof value;\n        if (type == \"number\" || type == \"string\" || type == \"boolean\" || type == \"object\") {\n            let saveObj: StorageData = { type: type, value: value };\n            //加密\n            try {\n                let data = this.encrypt(saveObj);\n                cc.sys.localStorage.setItem(key, data);\n            } catch (error) {\n                if (CC_DEBUG) cc.error(error);\n            }\n        } else {\n            if (CC_DEBUG) cc.error(`存储数据类型不支持 当前的存储类型: ${type}`);\n        }\n    }\n\n    public removeItem(key: string) {\n        cc.sys.localStorage.removeItem(key);\n    }\n    /**\n     * 清除登录缓存\n     */\n    cleanLoginCache() {\n        this.removeItem('facebookLoginCache');\n        this.removeItem('loginCache');\n    }\n}"]}