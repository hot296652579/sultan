{"version":3,"sources":["assets/script/framework/base/EventComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Service } from \"./Service\";\nimport { Manager } from \"../Framework\";\n\n/**\n * @description 事件处理组件\n */\n\nconst { ccclass, property } = cc._decorator;\n\n/**@description 这个地方做下特殊处理，防止外面的人进行修改 */\nconst addListeners = Symbol(\"addListeners\");\nconst removeEventListeners = Symbol(\"removeEventListeners\");\n\ninterface EventArgs {\n    name?: string,\n    func?: (data: any) => any;\n    mainCmd?: number,\n    handleType?: any,\n    isQueue?: boolean,\n}\n\n@ccclass\nexport default class EventComponent extends cc.Component {\n\n    protected _service: Service = null;\n    protected logTag = `[EventComponent]`;\n\n    private _events: EventArgs[] = [];\n\n    private _getEventArgs(): EventArgs {\n        if (arguments.length < 2) {\n            if (CC_DEBUG) cc.error(`注册事件参数错误`);\n            return null;\n        }\n\n        let args: EventArgs = {};\n        if (typeof arguments[0] == \"string\") {\n            //普通消息注册\n            args.name = arguments[0];\n            args.func = arguments[1];\n        } else {\n            //网络消息注册\n            args.mainCmd = arguments[0];\n            args.handleType = null;\n            args.isQueue = true;\n            if (arguments.length >= 2) {\n                args.func = arguments[1];\n            }\n            if (arguments.length >= 3) {\n                args.handleType = arguments[2];\n            }\n            if (arguments.length >= 4) {\n                args.isQueue = arguments[3];\n            }\n        }\n        return args;\n    }\n\n    /**\n     * @description 注册网络事件 ，在onLoad中注册，在onDestroy自动移除\n     * @param manCmd \n     * @param func 处理函数\n     * @param handleType 消息解析类型\n     * @param isQueue 是否加入队列\n     */\n    registerEvent(manCmd: number, func: (data: any) => void, handleType?: any, isQueue?: boolean);\n    /**\n     * 注册事件 ，在onLoad中注册，在onDestroy自动移除\n     * @param eventName \n     * @param func \n     */\n    registerEvent(eventName: string, func: (data: any) => void);\n    registerEvent() {\n        let args = this._getEventArgs.apply(this, arguments);\n        if (args) {\n            this._events.push(args);\n        }\n    }\n\n    /**\n     * @description 注册网络事件 ，在onLoad中注册，在onDestroy自动移除\n     * @param manCmd \n     * @param func 处理函数\n     * @param handleType 消息解析类型 如果不注册类型，返回的是服务器未进行解析的源数据，需要自己进行解包处理\n     * @param isQueue 是否加入队列\n     */\n    addEvent(manCmd: number, func: (data: any) => void, handleType?: any, isQueue?: boolean);\n    /**\n     * 注册事件 ，在onLoad中注册，在onDestroy自动移除\n     * @param eventName \n     * @param func \n     */\n    addEvent(eventName: string, func: (data: any) => void);\n    addEvent() {\n        let event: EventArgs = this._getEventArgs.apply(this, arguments);\n        if (event) {\n            this._events.push(event);\n\n            if (event.name) {\n                Manager.eventDispatcher.addEventListener(event.name, event.func, this);\n            } else {\n                //网络消息事件注册\n                if (this._service) {\n                    if (event.mainCmd) {\n                        this._service.addListener(\n                            event.mainCmd,\n                            event.handleType,\n                            event.func,\n                            event.isQueue,\n                            this\n                        );\n                    } else {\n                        cc.error(this.logTag, `注册的网络回调有误 class : ${cc.js.getClassName(this)} manCmd : ${event.mainCmd}`);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @description 删除注册网络事件\n     * @param manCmd 主cmd\n     */\n    removeEvent(manCmd: number);\n    /**\n     * @description 删除普通事件\n     * @param eventName 事件名\n     */\n    removeEvent(eventName: string);\n    removeEvent() {\n        if (arguments.length < 1) {\n            if (CC_DEBUG) cc.error(`参数有误`);\n            return;\n        }\n        if (arguments.length == 1) {\n            //事件移除\n            Manager.eventDispatcher.removeEventListener(arguments[0], this);\n            //删除本地事件\n            let i = this._events.length;\n            while (i--) {\n                if (this._events[i].name == arguments[0]) {\n                    this._events.splice(i, 1);\n                }\n            }\n\n        } else {\n            //删除网络消息\n            let mainCmd = arguments[0];\n            if (this._service && typeof mainCmd == \"number\") {\n                this._service.removeListeners(this, mainCmd);\n            }\n            //删除本地事件\n            let i = this._events.length;\n            while (i--) {\n                if (this._events[i].mainCmd == mainCmd) {\n                    this._events.splice(i, 1);\n                }\n            }\n        }\n    }\n\n    protected bindingEvents() {\n\n    }\n\n    onLoad() {\n        this.bindingEvents();\n        this[addListeners]();\n    }\n\n    onDestroy() {\n        this[removeEventListeners]();\n    }\n\n    [addListeners]() {\n\n        for (let i = 0; i < this._events.length; i++) {\n            let event = this._events[i];\n            if (event.name) {\n                //普通事件注册\n                Manager.eventDispatcher.addEventListener(event.name, event.func, this);\n            } else {\n                //网络消息事件注册\n                if (this._service) {\n                    if (event.mainCmd) {\n                        this._service.addListener(\n                            event.mainCmd,\n                            event.handleType,\n                            event.func,\n                            event.isQueue,\n                            this\n                        )\n                    } else {\n                        cc.error(this.logTag, `注册的网络回调有误 class : ${cc.js.getClassName(this)} manCmd : ${event.mainCmd}`);\n                    }\n                }\n            }\n        }\n    }\n\n    [removeEventListeners]() {\n        for (let i = 0; i < this._events.length; i++) {\n            let event = this._events[i];\n            if (event.name) {\n                //普通事件注册\n                Manager.eventDispatcher.removeEventListener(event.name, this);\n            }\n        }\n\n        if (this._service) {\n            this._service.removeListeners(this);\n            this._service = null;\n        }\n\n    }\n}\n"]}