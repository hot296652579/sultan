{"version":3,"sources":["assets/script/framework/event/EventDispatcher.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { getSingleton } from \"../base/Singleton\";\n\n/**\n * @description 事件派发器，原生的，当前节点没有在运行时，无法收到消息\n */\n\n// 忽略不打印的事件名\nconst IgnoreEventNameList = [\n    \"loadGameProgress\",\n]\n\ninterface IEvent {\n    type: string, // 事件类型\n    target: any, //事件target\n    callback: ((data: any) => void) | string;//事件回调\n}\n\nexport class EventDispatcher {\n\n    private static _instance: EventDispatcher = null;\n    public static Instance() { return this._instance || (this._instance = new EventDispatcher()); }\n    private logTag = `[EventDispatcher] `;\n    private _eventCaches: { [key: string]: Array<IEvent> } = null;\n    constructor() {\n        this._eventCaches = {};\n    }\n    /**\n     * @description 添加事件\n     * @param type 事件类型\n     * @param callback 事件回调\n     * @param target target\n     */\n    public addEventListener(type: string, callback: ((data: any) => void) | string, target: any) {\n        if (!type || !callback || !target) return;\n        let eventCaches: Array<IEvent> = this._eventCaches[type] || [];\n        let hasSame = false;\n        for (let i = 0; i < eventCaches.length; i++) {\n            if (eventCaches[i].target === target) {\n                hasSame = true;\n                break;\n            }\n        }\n        if (hasSame) {\n            return;\n        }\n        let newEvent: IEvent = { type: type, callback: callback, target: target };\n        eventCaches.push(newEvent);\n        this._eventCaches[type] = eventCaches;\n    }\n\n    /**\n     * @description 移除事件\n     * @param type 事件类型\n     * @param target \n     */\n    public removeEventListener(type: string, target: any) {\n        if (!type || !target) {\n            return;\n        }\n        let eventCaches: Array<IEvent> = this._eventCaches[type];\n        if (!eventCaches) {\n            return;\n        }\n        for (let i = 0; i < eventCaches.length; i++) {\n            if (eventCaches[i].target === target) {\n                eventCaches.splice(i, 1);\n                break;\n            }\n        }\n        if (eventCaches.length == 0) {\n            delete this._eventCaches[type];\n        }\n    }\n\n    /**\n     * @description 派发事件\n     * @param type 事件类型\n     * @param data 事件数据\n     */\n    public dispatchEvent(type: string, data?: any) {\n        if (!type) return;\n        let eventCaches: Array<IEvent> = this._eventCaches[type];\n        if (!eventCaches) return;\n        for (let i = 0; i < eventCaches.length; i++) {\n            let event = eventCaches[i];\n            try {\n                if (typeof Reflect == \"object\") {\n                    if (typeof event.callback == \"string\") {\n                        let func = Reflect.get(event.target, event.callback);\n                        if (func) {\n                            if (CC_DEBUG) cc.log(`${this.logTag} apply string func : ${event.callback} class : ${cc.js.getClassName(event.target)}`);\n                            Reflect.apply(func.bind(event.target), event.target, [data]);\n                        } else {\n                            if (CC_DEBUG) cc.error(`${this.logTag} class : ${cc.js.getClassName(event.target)} no func : ${event.callback}`);\n                        }\n                    }\n                    else {\n                        Reflect.apply(event.callback, event.target, [data]);\n                    }\n                } else {\n                    if (typeof event.callback == \"string\") {\n                        if (event.target && event.callback) {\n                            let func = event.target[event.callback];\n                            if (func && typeof func == \"function\") {\n                                func.apply(event.target, [data]);\n                            } else {\n                                if (CC_DEBUG) cc.error(`${event.callback} is not function`);\n                            }\n                        } else {\n                            if (CC_DEBUG) cc.error(`target or callback is null`);\n                        }\n                    } else {\n                        if (event.callback && event.target) {\n                            event.callback.apply(event.target, [data]);\n                        } else {\n                            if (CC_DEBUG) cc.error(`callback is null`);\n                        }\n                    }\n                }\n\n            } catch (error) {\n                cc.error(error);\n            }\n        }\n    }\n}\n\nwindow.dispatch = function (name: string, data?: any) {\n    if (CC_DEBUG && !CC_EDITOR && IgnoreEventNameList.indexOf(name) === -1) cc.log(`[dispatch] ${name} data : ${data}`);\n    //向自己封闭的管理器中也分发\n    EventDispatcher.Instance().dispatchEvent(name, data);\n}"]}