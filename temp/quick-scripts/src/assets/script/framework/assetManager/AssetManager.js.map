{"version":3,"sources":["assets/script/framework/assetManager/AssetManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ResourceCacheData, ResourceCacheStatus, ResourceInfo, BUNDLE_TYPE, ResourceType, BUNDLE_REMOTE } from \"../base/Defines\";\nimport { DataBaseTable } from \"../database/DataBase\";\nimport { RequestPackge } from \"../net/HttpClient\";\nimport { Manager } from \"../Framework\";\n\nclass RemoteLoader {\n\n    private _logTag = `[RemoteLoader] `;\n    private static _instance: RemoteLoader = null;\n    public static Instance() { return this._instance || (this._instance = new RemoteLoader()); }\n\n    private _maxConcurrentTask = 5;\n    /**@description 设置下载任务的最大上限数量，目前仅对CC_JSB有效，限制downloader的任务数量  */\n    public set maxConcurrentTask( value : number ){\n        this._maxConcurrentTask = value;\n    }\n    public get maxConcurrentTask( ){\n        return this._maxConcurrentTask;\n    }\n\n    /**@description 当前下载任务 */\n    private _currentTaskCount = 0;\n\n    /**@description 当前任务队列  {下载地址,存储路径}*/\n    private _taskQueue : {url : string , path : string}[] = [];\n\n    public loadImage(url: string, isNeedCache: boolean) {\n        let me = this;\n        return new Promise<cc.SpriteFrame>((resolve) => {\n            if (url == null || url == undefined || url.length <= 0) {\n                resolve(null);\n                return;\n            }\n            let remoteUrl = parseRemoteUrl(url);\n            let spCache = Manager.cacheManager.remoteCaches.getSpriteFrame(remoteUrl);\n            if (spCache && spCache.data) {\n                if (CC_DEBUG) cc.log(this._logTag, `从缓存精灵帧中获取:${remoteUrl.url}`);\n                resolve(<cc.SpriteFrame>(spCache.data));\n                return;\n            }\n\n            me._loadRemoteRes(url,cc.Texture2D , \"cache_png\", isNeedCache).then((data: any) => {\n                let remoteUrl = parseRemoteUrl(url);\n                //改变缓存类型\n                let cache = Manager.cacheManager.remoteCaches.get(remoteUrl);\n                if (data && cache) {\n                    if (CC_DEBUG) cc.log(`${this._logTag}加载图片完成${remoteUrl.url}`);\n                    cache.data = data;\n                    cache.data.name = remoteUrl.url;\n                    // cache.data.url = remoteUrl.url;\n                    let spriteFrame = Manager.cacheManager.remoteCaches.setSpriteFrame(remoteUrl, cache.data);\n                    resolve(spriteFrame);\n                } else {\n                    if (CC_DEBUG) cc.warn(`${this._logTag}加载图片错误${remoteUrl.url}`);\n                    resolve(null);\n                }\n            })\n        });\n    }\n\n    public loadSkeleton(path: string, name: string, isNeedCache: boolean) {\n        let me = this;\n        return new Promise<sp.SkeletonData>((resolve) => {\n            if (path && name) {\n                let url = `${path}/${name}`;\n                let spineAtlas = `${path}/${name}.atlas`;\n                let spinePng = `${path}/${name}.png`;\n                let spineJson = `${path}/${name}.json`;\n                let remoteUrl = parseRemoteUrl(url);\n                let cache = Manager.cacheManager.remoteCaches.get(remoteUrl);\n                if (cache) {\n                    if ( cache.isLoaded ){\n                        resolve(<sp.SkeletonData>(cache.data));\n                    }else{\n                        cache.finishCb.push(resolve);\n                    }\n                } else {\n                    cache = new ResourceCacheData();\n                    cache.resourceType = ResourceType.Remote;\n                    cache.assetType = sp.SkeletonData;\n                    cache.bundle = BUNDLE_REMOTE;\n                    Manager.cacheManager.remoteCaches.set(remoteUrl,cache);\n                    me._loadRemoteRes(spinePng,cc.Texture2D, \"cache_png\", isNeedCache).then((texture) => {\n                        if (texture) {\n                            me._loadRemoteRes(spineJson,cc.JsonAsset, \"cache_json\", isNeedCache).then((json) => {\n                                if (json) {\n                                    me._loadRemoteRes(spineAtlas,cc.JsonAsset, \"cache_atlas\", isNeedCache).then((atlas) => {\n                                        if (atlas) {\n                                            //生成SkeletonData数据\n                                            let asset = new sp.SkeletonData;\n                                            asset.skeletonJson = json;\n                                            asset.atlasText = atlas;\n                                            asset.textures = [texture];\n                                            let pngName = name + \".png\"\n                                            asset[\"textureNames\"] = [pngName];\n\n                                            cache.url = url;\n                                            asset.name = cache.url;\n                                            asset.url = cache.url;\n                                            cache.data = asset;\n                                            cache.isLoaded = true;\n                                            resolve(<sp.SkeletonData>(cache.data));\n                                            cache.doFinish(cache.data);\n                                        } else {\n                                            resolve(null);\n                                            cache.doFinish(null);\n                                            Manager.cacheManager.remoteCaches.remove(remoteUrl);\n                                        }\n                                    });\n                                } else {\n                                    resolve(null);\n                                    cache.doFinish(null);\n                                    Manager.cacheManager.remoteCaches.remove(remoteUrl);\n                                }\n                            });\n                        } else {\n                            resolve(null);\n                            cache.doFinish(null);\n                            Manager.cacheManager.remoteCaches.remove(remoteUrl);\n                        }\n                    })\n                }\n            } else {\n                resolve(null);\n            }\n        });\n    }\n\n    /**\n     * @description 加载资源\n     * @param requestURL 原请求地址\n     * @param storagePath 下载完成本地存储地址\n     */\n    private _loadLocalRes(requestURL: string, storagePath: string) {\n        let me = this;\n        if (CC_DEBUG) cc.log(`${this._logTag}加载本地文件:${storagePath}`);\n        let urlData = parseRemoteUrl(requestURL);\n        let cache = Manager.cacheManager.remoteCaches.get(urlData);\n        if ( cache ){\n            cc.assetManager.loadRemote(storagePath,(err,data) => {\n                if ( cache ){\n                    cache.isLoaded = true;\n                    if (data) {\n                        cache.data = data;\n                        cache.doJsbFinish(data);\n                        if ( CC_DEBUG ) cc.log(`${this._logTag}加载本地资源完成:${storagePath} => ${requestURL}`);\n                    }\n                    else {\n                        if (CC_DEBUG) cc.warn(`${this._logTag}加载本地资源异常:${storagePath}`);\n                        cache.doJsbFinish(null);\n                    }\n                    //把再加载过程里，双加载同一资源的回调都回调回去\n                    cache.doFinish(data);\n                }\n            });\n        }else{\n            cc.error(`找不到本地缓存 requestURL : ${requestURL} storagePath : ${storagePath}`);\n        }\n    }\n\n    private _loadRemoteRes(url: string,type : typeof cc.Asset , databaseTable: DataBaseTable, isNeedCache: boolean) {\n        return new Promise<any>((resolve) => {\n            let urlData = parseRemoteUrl(url);\n            let cache = Manager.cacheManager.remoteCaches.get(urlData);\n            if (cache) {\n                //有缓存,查看是否已经加载\n                if (cache.isLoaded) {\n                    //如果已经加载完成\n                    resolve(cache.data);\n                } else {\n                    //正在加载中\n                    cache.finishCb.push(resolve);\n                }\n            } else {\n                //没有缓存存在,生成加载缓存\n                cache = new ResourceCacheData();\n                cache.resourceType = ResourceType.Remote;\n                cache.assetType = type;\n                Manager.cacheManager.remoteCaches.set(urlData, cache);\n                if (CC_JSB) {\n                    let path = makeRemoteUrl(urlData);\n                    let fullPath = `${jsb.fileUtils.getWritablePath()}${path}`;\n                    if (CC_DEBUG) cc.log(`${this._logTag}${urlData.url}下载的资源将存入本地${fullPath}`);\n                    //先缓存回调，加载完成后再回调\n                    cache.jsbFinishCb = resolve;\n                    cache.jsbStoragePath = fullPath;\n\n                    //先再本地查找有没有下载好的资源，如果有，直接创建\n                    if (jsb.fileUtils.isFileExist(fullPath)) {\n                        if (isNeedCache) {\n                            if (CC_DEBUG) cc.log(`${this._logTag}本地已经存在${urlData.url} 本地路径为:${fullPath} ,使用本地缓存资源创建`);\n                            this._loadLocalRes(urlData.url, fullPath);\n                        } else {\n                            if (CC_DEBUG) cc.log(this._logTag, `${urlData.url}资源不需要缓存,重新下载`);\n                            jsb.fileUtils.removeFile(fullPath);\n                            this.pushTask(urlData.url,fullPath);\n                        }\n                    } else {\n\n\n                        let tempPath = `${jsb.fileUtils.getWritablePath()}${urlData.path}`;\n                        if (jsb.fileUtils.isDirectoryExist(tempPath)) {\n                            if (CC_DEBUG) cc.log(`已经存在文件夹：${tempPath}`);\n                        } else {\n                            if (CC_DEBUG) cc.log(`创建文件夹:${tempPath}`);\n                            jsb.fileUtils.createDirectory(tempPath);\n                        }\n                        this.pushTask(urlData.url,fullPath);\n                    }\n                } else {\n                    if (isNeedCache) {\n                        //网页h5方式加载\n                        if (Manager.dataBase.isSupport()) {\n                            Manager.dataBase.get(databaseTable, urlData.url).then((data) => {\n                                if (data) {\n                                    this._loadH5DatabaseData(cache, databaseTable, resolve, data);\n                                }\n                                else {\n                                    this._loadH5RemoteData(cache, databaseTable, urlData, resolve, isNeedCache, true);\n                                }\n                            });\n                        } else {\n                            this._loadH5RemoteData(cache, databaseTable, urlData, resolve, isNeedCache, false);\n                        }\n                    } else {\n                        //不需要做本地缓存处理\n                        this._loadH5RemoteData(cache, databaseTable, urlData, resolve, isNeedCache, false);\n                    }\n                }\n            }\n        });\n    }\n\n    private _loadH5RemoteData(cache: ResourceCacheData, databaseTable: DataBaseTable, urlData: RemoteUrl, resolve, isNeedCache: boolean, isSupportDatabase: boolean) {\n        let packge = new RequestPackge;\n        packge.data.url = urlData.url;\n        packge.data.isAutoAttachCurrentTime = !isNeedCache;\n        if (databaseTable == \"cache_png\") {\n            packge.data.responseType = \"blob\";\n        }\n        packge.send((netData) => {\n            //存入数据库\n            if (isNeedCache && isSupportDatabase) {\n                Manager.dataBase.put(databaseTable, { key: packge.data.url, data: netData });\n            }\n            this._loadH5DatabaseData(cache, databaseTable, resolve, netData);\n        }, (err) => {\n            resolve(null);\n            if (CC_DEBUG) cc.warn(this._logTag, `加载网络资源异常:${urlData.url}`);\n            cache.doFinish(null);\n            Manager.cacheManager.remoteCaches.remove(urlData);\n        });\n    }\n\n    private _loadH5DatabaseData(cache: ResourceCacheData, databaseTable: DataBaseTable, resolve, data) {\n        if (databaseTable == \"cache_png\") {\n            //创建图片\n            let imgUrl = URL.createObjectURL(data);\n            let image = new Image();\n            image.src = imgUrl;\n\n            //等图片加载完成后，才创建图片贴图，不然没办法正常显示 \n            image.addEventListener(\"load\", (ev) => {\n                let texture = new cc.Texture2D();\n                texture.initWithElement(image);\n                cache.isLoaded = true;\n                cache.data = texture;\n                resolve(cache.data);\n                cache.doFinish(cache.data);\n                URL.revokeObjectURL(imgUrl);\n            })\n        } else if (databaseTable == \"cache_json\") {\n            let json = JSON.parse(data);\n            cache.isLoaded = true;\n            cache.data = json;\n            resolve(cache.data);\n            cache.doFinish(cache.data);\n        }\n        else if (databaseTable == \"cache_atlas\") {\n            cache.isLoaded = true;\n            cache.data = data;\n            resolve(cache.data);\n            cache.doFinish(cache.data);\n        }\n    }\n\n    /**@description 由主游戏控制器驱动，在下载远程资源时，设置一个上限下载任务数据，以免同一时间任务数量过大 */\n    update(){\n        if ( CC_JSB ){\n            while ( this._currentTaskCount < this.maxConcurrentTask && this._taskQueue.length > 0 ){\n                this._currentTaskCount ++;\n                let value = this._taskQueue.shift();\n                if ( CC_DEBUG ) cc.log(`创建下载任务:${value.url}`);\n                let packge = new RequestPackge;\n                let me = this;\n                packge.data.url = value.url;\n                packge.data.responseType = \"arraybuffer\";\n                packge.send((netData) => {\n                    //写本地\n                    let data = new Uint8Array(netData);\n                    let isSuccess = false;\n                    if ( CC_JSB ){\n                        isSuccess =  jsb.fileUtils.writeDataToFile( data , value.path);\n                    }\n                    if ( isSuccess ){\n                        me.onLoadSuccess({requestURL : value.url,storagePath : value.path});\n                    }else{\n                        me.onLoadError({requestURL : value.url,storagePath : value.path},0,0,`写入本地${value.path}失败`);\n                    }\n\n                }, (err) => {\n                    cc.error(`下载错误 : ${value.url}`);\n                    me.onLoadError({requestURL : value.url,storagePath : value.path},err.type,0,err.reason);\n                });\n            }\n        }\n    }\n\n    /**@description 加载成功 */\n    private onLoadSuccess(task) {\n        if (CC_DEBUG) cc.log(`${this._logTag}加载资源完成 : ${task.requestURL}`);\n\n        //下载完成，减少当前任务数量\n        this._currentTaskCount--;\n        this._loadLocalRes(task.requestURL, task.storagePath);\n    }\n\n    private onLoadError(task, errorCode, errorCodeInternal, errorStr) {\n        if (CC_DEBUG) cc.error(`${this._logTag}task url : ${task.requestURL} , errorCode : ${errorCode} , internal : ${errorCodeInternal} reason : ${errorStr}`);\n        //下载错误，减少当前任务数量 \n        this._currentTaskCount--;\n        let remoteUrl = parseRemoteUrl(task.requestURL);\n        let cache = Manager.cacheManager.remoteCaches.get(remoteUrl);\n        cache.isLoaded = true;\n        cache.data = null;\n        if (CC_DEBUG) cc.warn(`${this._logTag}下载远程资源异常:${task.requestURL}`);\n        cache.doJsbFinish(null);\n        //把再加载过程里，双加载同一资源的回调都回调回去\n        cache.doFinish(null);\n        Manager.cacheManager.remoteCaches.remove(remoteUrl);\n    }\n\n    private pushTask( url : string , path : string ){\n\n        for ( let i = 0 ; i < this._taskQueue.length ; i++ ){\n            if ( this._taskQueue[i].url == url ){\n                if ( CC_DEBUG ) cc.log(`已经存在下载任务:${url}`);\n                return;\n            }\n        }\n        if ( CC_DEBUG ) cc.log(`当前任务数:${this._currentTaskCount} / ${this.maxConcurrentTask} 添加下载任务:${url}`);\n        this._taskQueue.push({url: url,path : path});\n    }\n}\n\n\nexport class AssetManager {\n    private logTag = `[AssetManager]: `;\n    private static _instance: AssetManager = null;\n    public static Instance() {\n        return this._instance || (this._instance = new AssetManager());\n    }\n\n    private _remote = new RemoteLoader();\n    public get remote(){ return this._remote;}\n    /**\n     * @description 获取Bundle\n     * @param bundle Bundle名|Bundle\n     */\n    public getBundle(bundle: BUNDLE_TYPE ) {\n        if ( bundle ){\n            if ( typeof bundle == \"string\" ){\n                return cc.assetManager.getBundle(bundle);\n            }\n            return bundle;\n        }\n        return null;\n    }\n\n    public load(\n        bundle: BUNDLE_TYPE,\n        path: string,\n        type: typeof cc.Asset,\n        onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void,\n        onComplete: (data:ResourceCacheData) => void): void {\n            let cache = Manager.cacheManager.get(bundle,path);\n            if ( cache ){\n                //存在缓存信息\n                if ( cache.isLoaded ){\n                    //已经加载完成\n                    if (CC_DEBUG && cache.status == ResourceCacheStatus.WAITTING_FOR_RELEASE ){\n                        cc.warn(this.logTag, `资源:${path} 等待释放，但资源已经加载完成，此时有人又重新加载，不进行释放处理`);\n                    }\n                    //加载完成\n                    onComplete(cache);\n                }else{\n                    if (CC_DEBUG && cache.status == ResourceCacheStatus.WAITTING_FOR_RELEASE ){\n                        cc.warn(this.logTag, `资源:${path}等待释放，但资源处理加载过程中，此时有人又重新加载，不进行释放处理`);\n                    }\n                    cache.finishCb.push(onComplete);\n                }\n                //重新复位资源状态\n                cache.status = ResourceCacheStatus.NONE;\n            }else{\n                //无缓存信息\n                cache = new ResourceCacheData();\n                cache.url = path;\n                cache.assetType = type;\n                cache.bundle = bundle;\n                Manager.cacheManager.set(bundle,path,cache);\n                console.time(`加载资源 : ${cache.url}`);\n                let _bundle = this.getBundle(bundle);\n                if (!_bundle ){\n                    //如果bundle不存在\n                    let error = new Error(`${this.logTag} ${bundle} 没有加载，请先加载`);\n                    this._onLoadComplete(cache,onComplete,error,null);\n                    return;\n                }\n                let res = _bundle.get(path,type);\n                if ( res ){\n                    this._onLoadComplete(cache,onComplete,null,res);\n                }else{\n                    if ( onProgress ){\n                        _bundle.load(path,type,onProgress,this._onLoadComplete.bind(this,cache,onComplete));\n                    }else{\n                        _bundle.load(path,type,this._onLoadComplete.bind(this,cache,onComplete));\n                    }\n                }\n            }\n    }\n\n    private _onLoadComplete( cache : ResourceCacheData , completeCallback: (data: ResourceCacheData) => void,err:Error,data:cc.Asset){\n        cache.isLoaded = true;\n        //添加引用关系\n        let tempCache = cache;\n        if (err) {\n            cc.error(`${this.logTag}加载资源失败:${cache.url} 原因:${err.message ? err.message : \"未知\"}`);\n            cache.data = null;\n            tempCache.data = null;\n            Manager.cacheManager.remove(cache.bundle,cache.url);\n            completeCallback(cache);\n        }\n        else {\n            if (CC_DEBUG) cc.log(`${this.logTag}加载资源成功:${cache.url}`);\n            cache.data = data;\n            tempCache.data = data;\n            completeCallback(cache);\n        }\n\n        //加载过程，有不同地方调用过来加载同一个资源的地方，都回调回去\n        cache.doFinish(tempCache);\n        cache.doGet(tempCache.data);\n\n        if (cache.status == ResourceCacheStatus.WAITTING_FOR_RELEASE) {\n            if (CC_DEBUG) cc.warn(this.logTag, `资源:${cache.url}加载完成，但缓存状态为等待销毁，销毁资源`);\n            if (cache.data) {\n                cache.status = ResourceCacheStatus.NONE;\n                let info = new ResourceInfo;\n                info.url = cache.url;\n                info.type = cache.assetType;\n                info.data = cache.data;\n                info.bundle = cache.bundle;\n                this.releaseAsset(info);\n            }\n        }\n\n        console.timeEnd(`加载资源 : ${cache.url}`);\n    }\n\n    public releaseAsset( info : ResourceInfo ){\n        if ( info && info.bundle ){\n            Manager.cacheManager.remove(info.bundle,info.url);\n            let bundle = this.getBundle(info.bundle);\n            if ( bundle ){\n                info && info.data && info.data.decRef();\n                bundle.release(info.url,info.type);\n            }\n        }\n    }\n\n}"]}