
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/script/framework/log/Log.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b2666lmhPFG6rCsrUUmDtv5', 'Log');
// script/framework/log/Log.ts

"use strict";
/**
 * @description 日志封装
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Log = exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["LOG"] = 1] = "LOG";
    LogLevel[LogLevel["DUMP"] = 16] = "DUMP";
    LogLevel[LogLevel["WARN"] = 256] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4096] = "ERROR";
    LogLevel[LogLevel["ALL"] = 4369] = "ALL";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
class _Log {
    constructor() {
        this._level = LogLevel.ALL;
        this._forceNativeLog = false;
    }
    get logLevel() {
        return this._level;
    }
    set logLevel(value) {
        this._level = value;
        this.bindLogHandler();
    }
    get forceNativeLog() {
        return this._forceNativeLog;
    }
    set forceNativeLog(value) {
        this._forceNativeLog = value;
    }
    /**@description 是否使用附加控制台方式,强制*/
    get isUsingConsole() {
        let win = window;
        if (win.vConsole) {
            return true;
        }
        return false;
    }
    get isDebug() {
        if (this.isUsingConsole) {
            return true;
        }
        if (cc.sys.isNative && this.forceNativeLog) {
            return true;
        }
        return CC_DEBUG;
    }
    _bindLogHanler(usingCustom) {
        if (usingCustom) {
            G.Logger.log("--------using custom log--------");
            let backupcc = window["cc"];
            if (!backupcc.dump) {
                window["cc"].dump = this.dump.bind(this);
            }
            cc.log = this.log.bind(this);
            cc.warn = this.warn.bind(this);
            cc.error = this.error.bind(this);
            if ((this.logLevel & LogLevel.LOG) && this.isDebug) {
                window["cc"].time = console.time;
                window["cc"].timeEnd = console.timeEnd;
            }
            else {
                window["cc"].time = this.doNothing.bind(this);
                window["cc"].timeEnd = this.doNothing.bind(this);
            }
        }
        else {
            G.Logger.log(`--------using default log--------`);
            if (this.logLevel & LogLevel.DUMP) {
                let backupcc = window["cc"];
                if (!backupcc.dump) {
                    window["cc"].dump = this.dump.bind(this);
                }
            }
            else {
                cc.dump = this.doNothing.bind(this);
            }
            if (this.logLevel & LogLevel.WARN) {
            }
            else {
                cc.warn = this.doNothing.bind(this);
            }
            if ((this.logLevel & LogLevel.LOG) && this.isDebug) {
                window["cc"].time = console.time;
                window["cc"].timeEnd = console.timeEnd;
            }
            else {
                window["cc"].time = this.doNothing.bind(this);
                window["cc"].timeEnd = this.doNothing.bind(this);
            }
        }
    }
    bindLogHandler() {
        if (this.isUsingConsole) {
            this._bindLogHanler(true);
        }
        else {
            if (cc.sys.isMobile) {
                G.Logger.log("--------isMobile-----------");
                this._bindLogHanler(true);
            }
            else {
                G.Logger.log(`--------other------os-----${cc.sys.os}`);
                G.Logger.log(`isdebug : ${CC_DEBUG}`);
                this._bindLogHanler(false);
            }
        }
    }
    log() {
        if (this.logLevel & LogLevel.LOG) {
            if (!this.isDebug)
                return;
            let backupLog = G.Logger.log || cc.log || window["log"];
            backupLog.call(_Log, `${this.getDateString()} INFO : ` + cc.js.formatStr.apply(cc, arguments), this.stack());
        }
    }
    dump() {
        if (this.logLevel & LogLevel.DUMP) {
            if (!this.isDebug)
                return;
            let ret = this._dump(arguments[0], arguments[1], arguments[2], arguments[4]);
            let backupLog = console.info || cc.log || window["info"];
            backupLog.call(_Log, `${this.getDateString()} DUMP : ` + cc.js.formatStr.apply(cc, [ret]), this.stack());
        }
    }
    warn() {
        if (this.logLevel & LogLevel.WARN) {
            if (!this.isDebug)
                return;
            let backupLog = G.Logger.warn || cc.warn || window["warn"];
            backupLog.call(_Log, `${this.getDateString()} WARN : ` + cc.js.formatStr.apply(cc, arguments), this.stack());
        }
    }
    error() {
        if (this.logLevel & LogLevel.ERROR) {
            if (!this.isDebug)
                return;
            if (cc.sys.isNative) {
                try {
                    let backupLog = G.Logger.log || cc.log || window["log"];
                    backupLog.call(_Log, `${this.getDateString()} ERROR : ` + cc.js.formatStr.apply(cc, arguments), this.stack());
                }
                catch (error) {
                    G.Logger.log(`---error---`);
                    G.Logger.error(error);
                }
            }
            else {
                let backupLog = G.Logger.error || cc.error || window["error"];
                backupLog.call(_Log, `${this.getDateString()} ERROR : ` + cc.js.formatStr.apply(cc, arguments), this.stack());
            }
        }
    }
    getDateString() {
        var d = new Date();
        var str = d.getHours() + "";
        var timeStr = "";
        timeStr += (str.length === 1 ? ("0" + str) : str) + ":";
        str = d.getMinutes() + "";
        timeStr += (str.length === 1 ? ("0" + str) : str) + ":";
        str = d.getSeconds() + "";
        timeStr += (str.length === 1 ? ("0" + str) : str) + ".";
        str = d.getMilliseconds() + "";
        if (str.length === 1)
            str = "00" + str;
        if (str.length === 2)
            str = "0" + str;
        timeStr += str;
        timeStr = '[' + timeStr + ']';
        return timeStr;
    }
    stack() {
        var e = new Error();
        var lines = e.stack.split("\n");
        lines.shift();
        var result = [];
        lines.forEach((line) => {
            line = line.substring(7);
            var lineBreak = line.split(" ");
            if (lineBreak.length < 2) {
                result.push(lineBreak[0]);
            }
            else {
                result.push({ [lineBreak[0]]: lineBreak[1] });
            }
        });
        if (result.length > 2) {
            let temp = "\n" + JSON.stringify(result[2]);
            return temp;
        }
        else {
            let temp = "";
            return temp;
        }
    }
    _dump(var_value, var_name = "unkown_dump_name", level = 2, indent_by = 0) {
        if (level < 0) {
            return "...";
        }
        indent_by = indent_by + 3;
        let self = this;
        let do_boolean = function (v) {
            return 'Boolean(1) ' + (v ? 'TRUE' : 'FALSE');
        };
        let do_number = function (v) {
            return v;
        };
        let do_string = function (v) {
            return '"' + v + '"';
        };
        let do_object = function (v) {
            if (v === null) {
                return "NULL(0)";
            }
            let out = '';
            let num_elem = 0;
            let indent = '';
            if (v instanceof Array) {
                num_elem = v.length;
                for (let d = 0; d < indent_by; ++d) {
                    indent += ' ';
                }
                out = "Array(" + num_elem + ") " + (indent.length === 0 ? '' : '') + "[";
                for (let i = 0; i < num_elem; ++i) {
                    out += "\n" + (indent.length === 0 ? '' : '' + indent) + "   [" + i + "] = " + self._dump(v[i], '', level, indent_by);
                }
                out += "\n" + (indent.length === 0 ? '' : '' + indent + '') + "]";
                return out;
            }
            else if (v instanceof Object) {
                for (let d = 0; d < indent_by; ++d) {
                    indent += ' ';
                }
                out = "{";
                for (let p in v) {
                    out += "\n" + (indent.length === 0 ? '' : '' + indent) + "   [" + p + "] = " + self._dump(v[p], '', level, indent_by);
                }
                out += "\n" + (indent.length === 0 ? '' : '' + indent + '') + "}";
                return out;
            }
            else {
                return 'Unknown Object Type!';
            }
        };
        var_name = typeof var_name === 'undefined' ? '' : var_name;
        let out = '';
        let v_name = '';
        switch (typeof var_value) {
            case "boolean":
                v_name = var_name.length > 0 ? var_name + ' = ' : '';
                out += v_name + do_boolean(var_value);
                break;
            case "number":
                v_name = var_name.length > 0 ? var_name + ' = ' : '';
                out += v_name + do_number(var_value);
                break;
            case "string":
                v_name = var_name.length > 0 ? var_name + ' = ' : '';
                out += v_name + do_string(var_value);
                break;
            case "object":
                v_name = var_name.length > 0 ? var_name + ' => ' : '';
                out += v_name + do_object(var_value);
                break;
            case "function":
                v_name = var_name.length > 0 ? var_name + ' = ' : '';
                out += v_name + "Function";
                break;
            case "undefined":
                v_name = var_name.length > 0 ? var_name + ' = ' : '';
                out += v_name + "Undefined";
                break;
            default:
                out += v_name + ' is unknown type!';
        }
        return out;
    }
    doNothing() {
    }
}
exports.Log = new _Log();

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,