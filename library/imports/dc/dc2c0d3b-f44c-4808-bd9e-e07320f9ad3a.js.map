{"version":3,"sources":["assets/script/common/manager/LogicManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Logic } from \"../base/Logic\";\nimport { LogicEvent, LogicEventData, LogicType } from \"../event/LogicEvent\";\nimport { Manager } from \"./Manager\";\n\nexport class LogicManager{\n    \n    private _logTag = `[LogicManager]`;\n    private static _instance: LogicManager = null;\n    public static Instance() { return this._instance || (this._instance = new LogicManager()); }\n\n    private _logics : Logic[] = [];\n    private _logicTypes = [];\n    private node : cc.Node = null;\n\n    public push( logicType : any ){\n        for ( let i = 0 ; i < this._logicTypes.length ; i++ ){\n            if ( this._logicTypes[i] == logicType ){\n                cc.error(this._logTag, `重复添加${cc.js.getClassName(logicType)}`);\n                return;\n            }\n        }\n        if ( this.node ){\n            //已经进入过onLoad,这里需要单独的进行初始化\n            let logic : Logic = new logicType;\n            logic.init(this.node);\n            this._logics.push(logic);\n            logic.onLoad();\n        }else{\n            this._logicTypes.push(logicType);\n        }\n    }\n\n    public onLoad( node : cc.Node ){\n        this.node = node;\n        Manager.eventDispatcher.addEventListener(LogicEvent.ENTER_COMPLETE,this.onEnterComplete,this);\n        if ( this._logics.length == 0 ){\n            for ( let i = 0 ; i < this._logicTypes.length ; i++ ){\n                let type = this._logicTypes[i];\n                cc.log(this._logTag,`添加Logic : ${cc.js.getClassName(type)}`);\n                let logic : Logic = new type;\n                logic.init(node);\n                this._logics.push( logic );\n            }\n        }\n\n        this._logics.forEach((data : Logic)=>{\n            data.onLoad();\n        });\n        \n    }\n\n    public onDestroy( node : cc.Node ){\n        Manager.eventDispatcher.removeEventListener(LogicEvent.ENTER_COMPLETE,this);\n        this._logics.forEach((data : Logic)=>{\n            data.onDestroy();\n        });\n    }\n\n    protected onEnterComplete(data: LogicEventData) {\n\n        //房间列表会直接加在大厅上，不对界面进行关闭操作\n        if ( data.type != LogicType.ROOM_LIST ){\n            if (data && data.views && data.views.length > 0) {\n                //关闭掉除排除项之外的所有界面\n                Manager.uiManager.closeExcept(data.views);\n            }\n            for ( let i = 0 ; i < this._logics.length ; i++ ){\n                let logic = this._logics[i];\n                if ( logic ){\n                    logic.onEnterComplete(data);\n                }\n            }\n        }\n    }\n}\n"]}