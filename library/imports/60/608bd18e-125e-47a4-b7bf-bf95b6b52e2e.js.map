{"version":3,"sources":["assets/script/framework/net/WebSocketClient.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { CustomNetEventType } from \"../event/EventApi\";\n\n/**\n * @description websocket封装\n */\nexport default class WebSocketClinet {\n\n    private _tag: string = \"[WebSocketClinet]\";\n    private _ip: string = \"\";\n    private _port: string = null;\n    private _protocol : string = \"ws\";\n    private _dataArr = [];\n    /**@description 是否处于等待连接状态 */\n    private _isWaitingConnect = false;\n\n    /** 连接超时时间 默认为10*/\n    private _conTimeOut: number = 10;\n    public set connectTimeOut( value : number ){\n        this._conTimeOut = value;\n    }\n    public get connectTimeOut( ) : number{\n        return this._conTimeOut;\n    }\n    /** 发送超时设置 默认为10*/\n    private _sendTimeOut: number = 10;\n    public set sendTimeOut( value : number ){\n        this._sendTimeOut = value;\n    }\n    public get sendTimeOut( ) : number{\n        return this._sendTimeOut;\n    }\n\n    private _ws: WebSocket = null;\n\n    private _onOpen : ( )=>void = null;\n    public set onOpen( value : ()=> void){\n        this._onOpen = value;\n    }\n    /**@description 网络连接成功 */\n    public get onOpen( ){\n        return this._onOpen;\n    }\n\n    private _onClose : (ev )=>void = null;\n    public set onClose( value : (ev )=>void ){\n        this._onClose = value;\n    }\n    /**@description 网络关闭 */\n    public get onClose( ){\n        return this._onClose;\n    }\n\n    private _onMessage : (data : Uint8Array)=> void = null;\n    public set onMessage( value : (data : Uint8Array)=>void){\n        this._onMessage = value;\n    }\n    /**@description 接收网络数据 */\n    public get onMessage(){\n        return this._onMessage;\n    }\n\n    private _onError : ( ev : Event )=>void = null;\n    public set onError( value : (ev : Event)=>void ){\n        this._onError = value;\n    }\n    /**@description 网络连接错误 */\n    public get onError(){\n        return this._onError;\n    }\n\n    private _closeEvent = null;\n\n    private init(ip: string, port: string , protocol : string ) {\n        this._ip = ip;\n        this._port = port;\n        this._protocol = protocol;\n        this._dataArr = [];\n        this._conTimeOut = 10;\n        this._sendTimeOut = 10;\n        this._closeEvent = null;\n    }\n\n\n    private connectWebSocket( ip : string , port: string , protocol : string ){\n        this.init(ip, port,protocol);\n        if (!this._ip ) return;\n        let fullUrl = `${protocol}://${this._ip}`;\n        if(this._port){\n            fullUrl = fullUrl +`:${this._port}`;\n        }\n        if ( CC_DEBUG) cc.log(this._tag,`initWebSocket : ${fullUrl}`);\n\n\n        if(CC_JSB && protocol == \"wss\"){\n            let pemFileUrl = cc.url.raw(\"resources/cacert/cacert.cer\");\n            if(cc.loader.md5Pipe){\n                pemFileUrl = cc.loader.md5Pipe.transformURL(pemFileUrl)\n            }\n            this._ws = new (<any>(WebSocket))(fullUrl,null,pemFileUrl);\n        }else{\n            this._ws = new WebSocket(fullUrl);\n        }\n        //cc.log(this._tag,`new websocket readyState : ${this._ws.readyState}`);\n        this._ws.binaryType = \"arraybuffer\";\n\n        //打开socket\n        this._ws.onopen = this.__onConected.bind(this);\n\n        //收消息\n        this._ws.onmessage = this.__onMessage.bind(this);\n\n        //socket关闭\n        this._ws.onclose = this.__onClose.bind(this);\n\n        //错误处理\n        this._ws.onerror = this.__onError.bind(this);\n    }\n\n    /**\n     * \n     * @param ip ip\n     * @param port 端口\n     */\n    public initWebSocket(ip: string, port: string, protocol : string ) {\n        if ( ip == undefined || ip == null || ip.length < 0 ){\n            if ( CC_DEBUG ) cc.error(this._tag,`init websocket error ip : ${ip} port : ${port}`);\n            return;\n        }\n        //先判断当前是否已经有连接\n        if ( this._ws ){\n            //cc.log(this._tag,`============initWebSocket111=================`);\n            //已经有连接，查看现在的websocket状态\n            if ( this._ws.readyState == WebSocket.CONNECTING ){\n                //当前正在建立连接\n                //查看当前连接中的地址是否跟要连接的相同\n                if ( this._ip == ip && this._port == port ){\n                    //cc.warn(this._tag,\"socket正在连接中\");\n                    return;\n                }\n                else{\n                    if ( CC_DEBUG ) cc.error(this._tag,`当前有正在连接的socket??`);\n                }\n            }else if ( this._ws.readyState == WebSocket.OPEN ){\n                //当前连接已经打开\n                if ( this._ip == ip && this._port == port ){\n                    if ( CC_DEBUG ) cc.warn(this._tag,`当前连接已经是打开的，不重复连接`);\n                    dispatch('webSocketIsOpen')\n                }\n                else{\n                    if ( CC_DEBUG ) cc.error(this._tag,`当前已经存在连接，请先关闭${this._ip}:${this._port} 再连接 ${ip} : ${port}`);\n                }\n            }else if( this._ws.readyState == WebSocket.CLOSING ){\n                //连接正在关闭，等连接关闭后在进行重新连接\n                this._isWaitingConnect = true;\n                this._ip = ip;\n                this._port = port;\n                if ( CC_DEBUG ) cc.warn(this._tag,`当前网络关闭连接中，关闭完成后重新连接`);\n            }else{\n                //连接处于关闭状态，直接创建新的连接\n                this._ws = null;\n                this.connectWebSocket(ip,port,protocol);\n            }\n        }else{\n            //cc.log(this._tag,`============initWebSocket=================`);\n            this.connectWebSocket(ip,port,protocol);\n        }\n        \n    }\n\n    private __onConected(event) {\n        if ( this._ws ){\n            if ( CC_DEBUG ) cc.log(this._tag,`onConected state : ${this._ws.readyState}`);\n        }\n        if ( this._dataArr.length > 0 ){\n            for ( let i = 0 ; i < this._dataArr.length ; i++ ){\n                this.send(this._dataArr[i]);\n            }\n            this._dataArr = [];\n        }\n        if ( this.onOpen ) this.onOpen();\n    }\n\n    private __onMessage(arraybuffer : MessageEvent ) {\n        let dataArr = new Uint8Array(arraybuffer.data);\n        if ( this.onMessage ) this.onMessage(dataArr);\n    }\n\n    private __onClose(event ) {\n\n        this._ws = null;\n        if ( this._closeEvent ){\n            event = this._closeEvent;\n            this._closeEvent = null;\n        }\n\n        if ( event ){\n            if ( CC_DEBUG ) cc.log(this._tag,`onClose type : ${event.type}`);\n        }\n        else{\n            if ( CC_DEBUG ) cc.log(this._tag,`onClose`);\n        }\n\n        //等待关闭后连接\n        if ( this._isWaitingConnect ){\n            if ( CC_DEBUG ) cc.log(this._tag,`收到连接关闭，有等待连接的网络，重连连接网络`);\n            this._closeEvent = null;\n            this.connectWebSocket(this._ip,this._port,this._protocol);\n            this._isWaitingConnect = false;\n        }else{\n            if ( this.onClose ) this.onClose(event);\n        }\n    }\n\n    private __onError(event : Event ) {\n        if ( event ){\n            if ( CC_DEBUG ) cc.error(this._tag,`onError`,event);\n        }else{\n            if ( CC_DEBUG ) cc.error(this._tag,`onError`);\n        }\n        if ( this.onError ) this.onError(event);\n    }\n\n    public send( data: string | ArrayBufferLike | Blob | ArrayBufferView ){\n        if ( !this._ws || !data ){\n            return;\n        }\n        if ( this._ws.readyState === WebSocket.OPEN ){\n            this._ws.send(data);\n        }\n        else{\n            //放入发送队列\n            \n            //如果当前连接正在连接中\n            if ( this._ws.readyState == WebSocket.CONNECTING ){\n                this._dataArr.push(data);\n            }\n            else{\n                //关闭或者正在关闭状态\n                let content = this._ws.readyState == WebSocket.CLOSING ? `网络正在关闭` : `网络已经关闭`;\n                if ( CC_DEBUG ) cc.warn(this._tag,`发送消息失败: ${content}`);\n            }\n        }\n    }\n\n    /**@description 关闭网络 */\n    public close( ){\n        if ( this._ws ){\n            this._closeEvent = {type : CustomNetEventType.CLOSE};\n            this._ws.close();\n        }\n        //清空发送\n        this._dataArr = [];\n        if ( CC_DEBUG ) cc.log(this._tag,`close websocket`);\n    }\n}\n"]}