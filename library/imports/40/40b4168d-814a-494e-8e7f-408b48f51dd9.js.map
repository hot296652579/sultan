{"version":3,"sources":["assets/script/common/component/SendVerificationCode.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { IController } from \"../../framework/controller/Controller\";\nimport { injectService, makeKey } from \"../../framework/decorator/Decorators\";\nimport { RequestPackge } from \"../../framework/net/HttpClient\";\nimport UIView from \"../../framework/ui/UIView\";\nimport PanelHelp from \"../../msgbox/PanelHelp\";\nimport { Config } from \"../config/Config\";\nimport { i18n } from \"../language/LanguageImpl\";\nimport { Manager } from \"../manager/Manager\";\nimport { protoPackage, serverType } from \"../net/CommonService\";\nimport { LobbyService } from \"../net/LobbyService\";\nimport { Type } from \"protobufjs\";\n\nexport const  enum VerificationCodeType {\n    none,\n    resetPwd,\n}\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\n@injectService(LobbyService.instance)\nexport default class SendVerificationCode extends UIView implements IController<LobbyService>{\n\n    @property(cc.Label)\n    label: cc.Label = null;\n    isSendOk: any;\n    verifiCD: number;\n    updateVerifiCD: NodeJS.Timeout;\n\n    service: LobbyService = null;\n    // onLoad () {}\n    verificationCodeType = VerificationCodeType.none;\n\n    bindingEvents() {\n        super.bindingEvents();\n        this.registerEvent(makeKey(serverType.Lobby, protoPackage.hall.HallCmd.SEND_PHONE_CODE), this.onPhoneCodeCall);\n    }\n\n    onPhoneCodeCall(netData) {\n        if (netData.statusMsg.status == 0) {\n            PanelHelp.showTip(i18n.ERRORTIPS.REQSENDCHECKMESSAGE);\n            this._doStartTime();\n        } else {\n            PanelHelp.showMsgBox('', Manager.makeLanguage(\"ERRORCODE.\" + netData.statusMsg.status));\n        }\n    }\n    doSendVerificationCode(msg) {\n        if (!!this.isSendOk) {\n            PanelHelp.showTip(i18n.ERRORTIPS.REQSENDCHECKMESSAGE);\n            return;\n        }\n        this.isSendOk = true;\n        this.label.language = i18n.BIND.SEND;\n        if (msg.type) { // webscoket\n            let req = protoPackage.hall.SendPhoneCode.create({ phone: msg.phone, area: msg.area });\n            let buffer = protoPackage.hall.SendPhoneCode.encode(req).finish();\n            this.service.sendMsg(serverType.Lobby,\n                protoPackage.hall.HallCmd.SEND_PHONE_CODE,\n                buffer);\n\n        } else {//http\n            let url = '';\n            url += G.URLMgr.loginURL + 'sms?phone=' + encodeURIComponent(msg.phone) + '&area=' + encodeURIComponent(msg.areaCode) + \"&type=\" + this.verificationCodeType;\n            // url += 'http://192.168.6.200:8088/' + 'sms?phone=' + msg.phone;\n\n\n            let packge = new RequestPackge;\n            packge.data.url = url;\n            packge.send((netData) => {\n                if (netData.state == 0) {\n                    PanelHelp.showTip(i18n.ERRORTIPS.REQSENDCHECKMESSAGE);\n                    this._doStartTime();\n                } else {\n                    PanelHelp.showMsgBox('', i18n.ERRORCODE[netData.state] || Manager.makeLanguage(\"ERRORCODE.SERVERERROR\"));\n                    this.sendFail()\n                }\n\n            }, (err) => {\n                G.Logger.log('验证码 = ', err);\n                this.sendFail()\n\n\n            });\n        }\n\n    }\n\n    _doStartTime() {\n        this.verifiCD = 60;\n        if (this.node.getComponent(cc.Button)) {\n            this.node.getComponent(cc.Button).interactable = false;\n        }\n        this.label.string = this.verifiCD + 's';\n        this.verifiCD -= 1;\n        this.updateVerifiCD = setInterval(() => {\n            if (this.verifiCD < 0) {\n                clearInterval(this.updateVerifiCD);\n                this.verifiCD = 60;\n                this.label.language = i18n.BIND.SEND;\n                this.isSendOk = null;\n                this.countDownEnd();\n                if (this.node.getComponent(cc.Button)) {\n                    this.node.getComponent(cc.Button).interactable = true;\n                }\n            } else {\n                if (this.label == null) {\n                    clearInterval(this.updateVerifiCD);\n                    if (cc.isValid(this.node)) {\n                        this.onDestroy();\n                    }\n\n                } else {\n                    this.label.string = this.verifiCD + 's';\n                    this.verifiCD--;\n                }\n\n            }\n        }, 1000)\n    }\n    countDownEnd() {\n\n    }\n    sendFail() {\n        this.isSendOk = null;\n    }\n    setVerificationCodeType(type: VerificationCodeType) {\n        this.verificationCodeType = type;\n    }\n}\n"]}