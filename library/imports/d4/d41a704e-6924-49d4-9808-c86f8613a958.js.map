{"version":3,"sources":["assets/script/common/component/CountDownCode.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA,qEAA8E;AAE9E,uEAA+C;AAM/C,sDAAmD;AAGnD,IAAmB,oBAGlB;AAHD,WAAmB,oBAAoB;IACnC,+DAAI,CAAA;IACJ,uEAAQ,CAAA;AACZ,CAAC,EAHkB,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAGtC;AACD,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC;AAI5C,IAAqB,aAAa,GAAlC,MAAqB,aAAc,SAAQ,gBAAM;IAAjD;;QAGI,UAAK,GAAa,IAAI,CAAC;QAGvB,eAAU,GAAc,IAAI,CAAC;QAK7B,YAAO,GAAiB,IAAI,CAAC;QAI7B,yBAAoB,GAAG,oBAAoB,CAAC,IAAI,CAAC;IA0CrD,CAAC;IA7CG,MAAM;QACF,uBAAuB;IAC3B,CAAC;IAGD,aAAa;QACT,KAAK,CAAC,aAAa,EAAE,CAAC;IAC1B,CAAC;IAED,YAAY;QACR,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;YACnC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,YAAY,GAAG,KAAK,CAAC;SAC1D;QACD,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;QACxC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE;YACnC,IAAI,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE;gBACnB,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBACnC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;gBACnB,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;oBACnC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC;iBACzD;aACJ;iBAAM;gBACH,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;oBACpB,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBACnC,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;wBACvB,IAAI,CAAC,SAAS,EAAE,CAAC;qBACpB;iBAEJ;qBAAM;oBACH,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;oBACxC,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACnB;aAEJ;QACL,CAAC,EAAE,IAAI,CAAC,CAAA;IACZ,CAAC;IACD,YAAY;QACR,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;IACnC,CAAC;CACJ,CAAA;AAtDG;IADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;4CACI;AAGvB;IADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;iDACS;AANZ,aAAa;IAFjC,OAAO;IACP,0BAAa,CAAC,2BAAY,CAAC,QAAQ,CAAC;GAChB,aAAa,CAyDjC;kBAzDoB,aAAa","file":"","sourceRoot":"/","sourcesContent":["import { IController } from \"../../framework/controller/Controller\";\nimport { injectService, makeKey } from \"../../framework/decorator/Decorators\";\nimport { RequestPackge } from \"../../framework/net/HttpClient\";\nimport UIView from \"../../framework/ui/UIView\";\nimport PanelHelp from \"../../msgbox/PanelHelp\";\nimport { Config } from \"../config/Config\";\nimport { i18n } from \"../language/LanguageImpl\";\nimport { Manager } from \"../manager/Manager\";\nimport { protoPackage, serverType } from \"../net/CommonService\";\nimport { LobbyService } from \"../net/LobbyService\";\nimport { Type } from \"protobufjs\";\n\nexport const  enum VerificationCodeType {\n    none,\n    resetPwd,\n}\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\n@injectService(LobbyService.instance)\nexport default class CountDownCode extends UIView implements IController<LobbyService>{\n\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    @property(cc.Button)\n    btnGetCode: cc.Button = null;\n\n    verifiCD: number;\n    updateVerifiCD: NodeJS.Timeout;\n\n    service: LobbyService = null;\n    onLoad() {\n        // this._doStartTime();\n    }\n    verificationCodeType = VerificationCodeType.none;\n\n    bindingEvents() {\n        super.bindingEvents();\n    }\n\n    _doStartTime() {\n        this.node.active = true;\n        this.btnGetCode.enabled = false;\n        this.verifiCD = 60;\n        if (this.node.getComponent(cc.Button)) {\n            this.node.getComponent(cc.Button).interactable = false;\n        }\n        this.label.string = this.verifiCD + 's';\n        this.verifiCD -= 1;\n        this.updateVerifiCD = setInterval(() => {\n            if (this.verifiCD < 0) {\n                clearInterval(this.updateVerifiCD);\n                this.verifiCD = 60;\n                this.countDownEnd();\n                if (this.node.getComponent(cc.Button)) {\n                    this.node.getComponent(cc.Button).interactable = true;\n                }\n            } else {\n                if (this.label == null) {\n                    clearInterval(this.updateVerifiCD);\n                    if (cc.isValid(this.node)) {\n                        this.onDestroy();\n                    }\n\n                } else {\n                    this.label.string = this.verifiCD + 's';\n                    this.verifiCD--;\n                }\n\n            }\n        }, 1000)\n    }\n    countDownEnd() {\n        this.node.active = false;\n        this.btnGetCode.enabled = true;\n    }\n}\n"]}