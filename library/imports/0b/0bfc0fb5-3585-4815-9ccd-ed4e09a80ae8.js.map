{"version":3,"sources":["assets/script/loading/Loading.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,oEAA4C;AAI5C,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC;AAG5C,IAAqB,OAAO,GAA5B,MAAqB,OAAQ,SAAQ,gBAAM;IAA3C;;QAGI,UAAK,GAAa,IAAI,CAAC;QAuFvB,iBAAiB;IACrB,CAAC;IAxEU,MAAM,CAAC,YAAY;QACtB,OAAO,wBAAwB,CAAC;IACpC,CAAC;IAED,MAAM;QACF,KAAK,CAAC,MAAM,EAAE,CAAC;QACf,wCAAwC;IAE5C,CAAC;IACD,aAAa;QACT,KAAK,CAAC,aAAa,EAAE,CAAC;QACtB,2EAA2E;QAC3E,IAAI,EAAE,CAAC,GAAG,CAAC,SAAS,EAAE;YAClB,yDAAyD;YACzD,2CAA2C;YAC3C,2DAA2D;YAC3D,sDAAsD;YACtD,yDAAyD;YACzD,QAAQ;YACR,MAAM;SACT;IAEL,CAAC;IACD,IAAI,CAAC,IAAI;QACL,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChB,uCAAuC;QACvC,wCAAwC;QACxC,iCAAiC;QACjC,qCAAqC;QACrC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACtC;QACD,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAClC;QACD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,GAAG,EAAE;YAC/B,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,QAAQ,CAAC,eAAe,CAAC,CAAC;QAE9B,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;QAEhB,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,SAAS,EAAE;YAClC,sCAAsC;YACtC,8BAA8B;YAC9B,wDAAwD;YACxD,oCAAoC;YACpC,IAAI;SACP;IAEL,CAAC;IAED,KAAK;QACD,0BAA0B;QAC1B,iDAAiD;QACjD,gBAAgB;QAChB,WAAW;QAEX,2BAA2B;QAC3B,iDAAiD;QACjD,wBAAwB;QACxB,eAAe;QACf,WAAW;IAEf,CAAC;IACD,SAAS;QACL,KAAK,CAAC,SAAS,EAAE,CAAC;QAClB,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAClC;IACL,CAAC;CAGJ,CAAA;AAxFG;IADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;sCACI;AAHN,OAAO;IAD3B,OAAO;GACa,OAAO,CA2F3B;kBA3FoB,OAAO","file":"","sourceRoot":"/","sourcesContent":["import { i18n } from \"../common/language/LanguageImpl\";\nimport { Manager } from \"../common/manager/Manager\";\nimport UIView from \"../framework/ui/UIView\";\nimport PanelHelp from \"../msgbox/PanelHelp\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Loading extends UIView {\n\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    // @property(cc.Node)\n    // progressbarNode: cc.Node = null;\n\n    // @property(cc.ProgressBar)\n    // progressbar: cc.ProgressBar = null;\n\n    // @property(cc.Label)\n    // progressbarLabel: cc.Label = null;\n\n\n    outTimeCall: NodeJS.Timeout;\n\n\n\n    public static getPrefabUrl() {\n        return \"common/prefabs/Loading\";\n    }\n\n    onLoad() {\n        super.onLoad();\n        // this.progressbar.node.active = false;\n\n    }\n    bindingEvents() {\n        super.bindingEvents();\n        // this.registerEvent(HallEvent.DOWNLOAD_PROGRESS, this.onDownloadProgess);\n        if (cc.sys.isBrowser) {\n            // this.registerEvent(\"loadGameProgress\", (progress) => {\n            //     this.progressbar.node.active = true;\n            //     if ((progress / 100) >= this.progressbar.progress) {\n            //         this.progressbar.progress = progress / 100;\n            //         this.progressbarLabel.string = progress + \"%\";\n            //     }\n            // });\n        }\n\n    }\n    show(args) {\n        super.show(args)\n        // this.progressbarNode.active = false;\n        // this.progressbar.node.active = false;\n        // this.progressbar.progress = 0;\n        // this.progressbarLabel.string = \"\";\n        if (this.args[0]) {\n            this.label.language = this.args[0];\n        }\n        if (this.outTimeCall) {\n            clearTimeout(this.outTimeCall);\n        }\n        this.outTimeCall = setTimeout(() => {\n            this.close();\n            dispatch(\"serverOutTime\");\n\n        }, this.args[1])\n\n        if (this.args[2] && cc.sys.isBrowser) {\n            // this.progressbarNode.active = true;\n            // this.progressbarNode.y = 0;\n            // if (!Manager.uiManager.isInCurrentGame(\"HallView\")) {\n            //     this.progressbarNode.y = -50;\n            // }\n        }\n\n    }\n\n    start() {\n        // cc.tween(this.iconWait)\n        // .repeatForever(cc.tween().by(0.1,{angle : 30})\n        // .delay(0.01))\n        // .start()\n\n        // cc.tween(this.juhuaicon)\n        // .repeatForever(cc.tween().to(0.3,{scaleX : 0})\n        // .to(0.3,{scaleX : 1})\n        // .delay(0.2))\n        // .start()\n\n    }\n    onDestroy() {\n        super.onDestroy();\n        if (this.outTimeCall) {\n            clearTimeout(this.outTimeCall);\n        }\n    }\n\n    // update (dt) {}\n}\n"]}