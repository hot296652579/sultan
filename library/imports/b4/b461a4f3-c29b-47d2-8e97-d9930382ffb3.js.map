{"version":3,"sources":["assets/script/common/manager/Manager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**@description 管理器 */\n\nimport { _FramewokManager } from \"../../framework/Framework\";\nimport { NetManager } from \"./NetManager\";\nimport { LogicManager } from \"./LogicManager\";\nimport GlobalAudio from \"../component/GlobalAudio\";\nimport { Log, LogLevel } from \"../../framework/log/Log\";\nimport { extentionsInit } from \"../../framework/extentions/Extentions\";\nimport { CocosExtentionInit } from \"../../framework/extentions/CocosExtention\";\nimport { LanguageImpl } from \"../language/LanguageImpl\";\nimport { getSingleton } from \"../../framework/base/Singleton\";\nimport { USING_LAN_KEY } from \"../../framework/base/Defines\";\nimport GameView from \"../base/GameView\";\nimport { GameData } from \"../base/GameData\";\n\nclass _Manager extends _FramewokManager {\n\n    /**@description 网络组件管理器 */\n    get netManager() {\n        return getSingleton(NetManager);\n    }\n\n    /**@description 逻辑控制器管理器 */\n    get logicManager() {\n        return getSingleton(LogicManager);\n    }\n\n    /**@description 全局网络播放声音组件，如播放按钮音效，弹出框音效等 */\n    private _globalAudio: GlobalAudio = null;\n    get globalAudio() {\n        // if ( this._globalAudio ){\n        //     return this._globalAudio;\n        // }\n        this._globalAudio = this.uiManager.getCanvas().getComponent(GlobalAudio);\n        return this._globalAudio;\n    }\n\n    /**@description 当前游戏GameView, GameView进入onLoad赋值 */\n    gameView: GameView = null;\n\n    /**@description 游戏数据 */\n    gameData: GameData = null;\n\n    /**\n     * @description 把语言包转换成i18n.xxx形式\n     * @param param 语言包配置\n     * @param isUsingAssetBundle 是否使用currentGameBundle进行转换如在某游戏内，需要获取某游戏的语言包路径\n     * @example\n     * export let TANK_LAN_ZH = {\n     * language: cc.sys.LANGUAGE_CHINESE,\n     * data: {\n     * title: `坦克大战`,\n     * player: '单人模式 ',\n     * palyers: '双人模式',\n     * }\n     * }\n     * //以上是坦克大战的语言包,assetBundle为tankBattle\n     * Manager.makeLanguage(\"title\",true); //=> i18n.tankBattle.title 指向游戏特定的语言包\n     * Manager.makeLanguage(\"title\"); //=> i18n.title 指向的大厅的公共语言包\n     */\n    makeLanguage(param: string | (string | number)[], isUsingAssetBundle: boolean = false): (string | number)[] | string {\n        if (typeof param == \"string\") {\n            if (isUsingAssetBundle && this.gameData) {\n                return `${USING_LAN_KEY}${this.gameData.bundle}.${param}`;\n            }\n            return `${USING_LAN_KEY}${param}`;\n        }\n        if (typeof param[0] == \"string\" && param instanceof Array) {\n            if (isUsingAssetBundle && this.gameData) {\n                param[0] = `${USING_LAN_KEY}${this.gameData.bundle}.${param[0]}`;\n            } else {\n                param[0] = `${USING_LAN_KEY}${param[0]}`;\n            }\n        }\n        return param;\n    }\n\n    /**@description 获取语言包 \n     * \n     */\n    getLanguage(param: string | (string | number)[], bundle: BUNDLE_TYPE = null): string {\n        let key = \"\";\n        if (typeof param == \"string\") {\n            if (bundle) {\n                key = `${USING_LAN_KEY}${bundle}.${param}`;\n            } else {\n                key = `${USING_LAN_KEY}${param}`;\n            }\n            return this.language.get([key]);\n        }\n        if (typeof param[0] == \"string\" && param instanceof Array) {\n            if (bundle) {\n                param[0] = `${USING_LAN_KEY}${bundle}.${param[0]}`;\n            } else {\n                param[0] = `${USING_LAN_KEY}${param[0]}`;\n            }\n            return this.language.get(param);\n        }\n        cc.error(`传入参数有误`);\n        return \"\";\n    }\n\n    init() {\n        //日志\n        // Log.logLevel = LogLevel.ERROR | LogLevel.LOG | LogLevel.WARN | LogLevel.DUMP;\n        //适配\n        this.adaptor.initBrowserAdaptor();\n        //扩展\n        extentionsInit();\n        //引擎扩展初始化\n        CocosExtentionInit();\n        //语言包初始化\n        //cc.log(\"language init\");\n        this.language.delegate = getSingleton(LanguageImpl)\n    }\n}\n\nexport const Manager = new _Manager();"]}