{"version":3,"sources":["assets/script/common/manager/DataManager.ts"],"names":[],"mappings":";;;;;;;;;AACA,mFAA2D;AAG3D,MAAqB,WAAY,SAAQ,qBAAW;IAqBhD;QACI,KAAK,EAAE,CAAC;QAlBZ,uBAAuB;QACf,cAAS,GAA0B,IAAI,CAAC;QAmB5C,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;IAC/B,CAAC;IAlBM,MAAM,CAAC,WAAW;QACrB,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;YAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,WAAW,EAAE,CAAC;SACvC;QACD,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,OAAO;QACjB,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;YAC1B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;SAC7B;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC3B,CAAC;IAQD;;OAEG;IACO,OAAO;QACb,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAe,EAAE,GAAW,EAAE,GAA0B,EAAE,EAAE;YAChF,KAAK,CAAC,OAAO,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACI,GAAG,CAAqB,SAAqC;QAChE,IAAI,SAAS,GAAW,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QACtD,IAAI,QAAQ,GAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAM,CAAC;QACrD,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC7C,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;SAClC;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED;;;OAGG;IACI,GAAG,CAAqB,SAAqC;QAChE,IAAI,SAAS,GAAW,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAEtD,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;YACzB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,SAAS,OAAO,CAAC,CAAC;YACtC,OAAO;SACV;QAED,IAAI,QAAQ,GAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAM,CAAC;QACrD,IAAI,QAAQ,EAAE;YACV,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,SAAS,KAAK,CAAC,CAAC;YACtC,OAAO,QAAQ,CAAC;SACnB;QAED,QAAQ,GAAG,IAAI,SAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACxC,OAAO,QAAQ,CAAC;IACpB,CAAC;IAGD;;OAEG;IACK,GAAG,CAAqB,SAAqC;QACjE,IAAI,SAAS,GAAW,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAEtD,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;YACzB,OAAO;SACV;QAED,IAAI,QAAQ,GAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAM,CAAC;QACrD,IAAI,QAAQ,EAAE;YACV,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;SACpC;IACL,CAAC;;AA3FL,8BA8FC;AA5FkB,sBAAU,GAAgB,IAAI,CAAC","file":"","sourceRoot":"/","sourcesContent":["import BaseData from \"../../base/BaseData\";\nimport BaseManager from \"../../framework/base/BaseManager\";\nimport * as DataInterface from \"../../interface/DataInterface\";\n\nexport default class DataManager extends BaseManager {\n\n    private static s_instance: DataManager = null;\n\n    // 数据注册结构 Map<数据类名, 数据>\n    private m_dataMap: Map<string, BaseData> = null;\n\n    public static getInstance(): DataManager {\n        if (this.s_instance === null) {\n            this.s_instance = new DataManager();\n        }\n        return this.s_instance;\n    }\n\n    public static destroy(): void {\n        if (this.s_instance !== null) {\n            this.s_instance.destroy();\n        }\n        this.s_instance = null;\n    }\n\n    constructor() {\n        super();\n\n        this.m_dataMap = new Map();\n    }\n\n    /**\n     * 销毁 清理所有数据\n     */\n    protected destroy(): void {\n        this.m_dataMap.forEach((value: BaseData, key: string, map: Map<string, BaseData>) => {\n            value.destroy();\n        });\n        this.m_dataMap.clear();\n        this.m_dataMap = null;\n    }\n\n    /**\n     * 获取数据对象\n     * @param dataClass 数据类\n     * @returns {BaseData} 数据对象\n     */\n    public get<T extends BaseData>(dataClass: DataInterface.DataClass<T>): T {\n        let className: string = cc.js.getClassName(dataClass);\n        let baseData: T = this.m_dataMap.get(className) as T;\n        if (baseData === undefined || baseData === null) {\n            baseData = this.add(dataClass);\n        }\n        return baseData;\n    }\n\n    /**\n     * 添加数据\n     * @param dataClass {DataInterface.DataClass<T>} 数据类\n     */\n    public add<T extends BaseData>(dataClass: DataInterface.DataClass<T>): T {\n        let className: string = cc.js.getClassName(dataClass);\n\n        if (this.m_dataMap === null) {\n            G.Logger.warn(`添加 ${className} 数据失败`);\n            return;\n        }\n\n        let baseData: T = this.m_dataMap.get(className) as T;\n        if (baseData) {\n            G.Logger.warn(`已经存在 ${className} 对象`);\n            return baseData;\n        }\n\n        baseData = new dataClass();\n        this.m_dataMap.set(className, baseData);\n        return baseData;\n    }\n\n    \n    /**\n     * 删除数据\n     */\n     public del<T extends BaseData>(dataClass: DataInterface.DataClass<T>): void {\n        let className: string = cc.js.getClassName(dataClass);\n\n        if (this.m_dataMap === null) {\n            return;\n        }\n\n        let baseData: T = this.m_dataMap.get(className) as T;\n        if (baseData) {\n            baseData.destroy();\n            this.m_dataMap.delete(className);\n        }\n    }\n\n\n}"]}