{"version":3,"sources":["assets/script/common/language/LanguageChange.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,uEAA+C;AAC/C,gDAA6C;AAE7C,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC;AAE5C;;GAEG;AAGH,IAAqB,cAAc,GAAnC,MAAqB,cAAe,SAAQ,gBAAM;IAAlD;;QAII,oBAAe,GAAuB,IAAI,CAAC;QAoD3C,iBAAiB;IACrB,CAAC;IAnDU,MAAM,CAAC,YAAY;QACtB,OAAO,+BAA+B,CAAC;IAC3C,CAAC;IAED,MAAM;QACF,KAAK,CAAC,MAAM,EAAE,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAK,QAAQ,GAAG,SAAS,CAAA;QACzB,IAAI,iBAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC,GAAG,CAAC,gBAAgB,EAAE;YAC5D,QAAQ,GAAG,SAAS,CAAA;SACvB;aAAK,IAAG,iBAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC,GAAG,CAAC,cAAc,EAAC;YAC9D,QAAQ,GAAG,OAAO,CAAA;SACrB;QAED,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAC,EAAE;YAC/C,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ;gBAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAA;QAC5D,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,cAAc,EAAE,CAAC;IAE1B,CAAC;IACD,OAAO,CAAC,IAAI,EAAE,IAAI;QACd,QAAQ,IAAI,EAAE;YACV,KAAK,SAAS;gBAAE,IAAI,CAAC,MAAM,EAAE,CAAC;gBAAC,MAAM;YACrC,KAAK,OAAO;gBAAE,IAAI,CAAC,eAAe,EAAE,CAAC;gBAAC,MAAM;YAC5C,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;SAC9D;IACL,CAAC;IACD,MAAM;QACF,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAC,EAAE;YAC/C,IAAI,MAAM,CAAC,SAAS,EAAE;gBAClB,QAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE;oBACtB,KAAK,SAAS;wBACV,IAAI,iBAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,gBAAgB,EAAE;4BAC3D,iBAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;yBACpD;wBACD,MAAM;oBACV,KAAK,OAAO;wBACR,IAAI,iBAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE;4BACzD,iBAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;yBAClD;wBACD,MAAM;oBACV;wBACI,MAAM;iBACb;aACJ;QACL,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,eAAe,EAAE,CAAA;IAC1B,CAAC;CAGJ,CAAA;AArDG;IADC,QAAQ,CAAC,EAAE,CAAC,eAAe,CAAC;uDACc;AAJ1B,cAAc;IADlC,OAAO;GACa,cAAc,CAyDlC;kBAzDoB,cAAc","file":"","sourceRoot":"/","sourcesContent":["import UIView from \"../../framework/ui/UIView\";\nimport { Manager } from \"../manager/Manager\";\n\nconst { ccclass, property } = cc._decorator;\n\n/**\n * 多语言切换界面\n */\n\n@ccclass\nexport default class LanguageChange extends UIView {\n\n\n    @property(cc.ToggleContainer)\n    toggleContainer: cc.ToggleContainer = null;\n\n    public static getPrefabUrl() {\n        return \"common/prefabs/LanguageChange\";\n    }\n\n    onLoad() {\n        super.onLoad();\n        this.content = cc.find('content', this.node);\n        let  language = \"english\"\n        if (Manager.language.getLanguage() === cc.sys.LANGUAGE_ENGLISH) {\n            language = \"english\"\n        }else if(Manager.language.getLanguage() === cc.sys.LANGUAGE_HINDI){\n            language = \"hindi\"\n        }\n\n        this.toggleContainer.toggleItems.forEach((toggle)=>{\n            if (toggle.node.name == language)toggle.isChecked = true\n        })\n        this.showWithAction();\n       \n    }\n    onClick(name, node) {\n        switch (name) {\n            case \"confirm\": this.okCall(); break;\n            case \"close\": this.closeWithAction(); break;\n            default: G.Logger.error(\"no find button name -> %s\", name);\n        }\n    }\n    okCall(){\n        this.toggleContainer.toggleItems.forEach((toggle)=>{\n            if (toggle.isChecked) {\n                switch (toggle.node.name) {\n                    case \"english\":\n                        if (Manager.language.getLanguage() != cc.sys.LANGUAGE_ENGLISH) {\n                            Manager.language.change(cc.sys.LANGUAGE_ENGLISH);\n                        }\n                        break;\n                    case \"hindi\":\n                        if (Manager.language.getLanguage() != cc.sys.LANGUAGE_HINDI) {\n                            Manager.language.change(cc.sys.LANGUAGE_HINDI);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            }\n        })\n\n        this.closeWithAction()\n    }\n\n    // update (dt) {}\n}\n"]}