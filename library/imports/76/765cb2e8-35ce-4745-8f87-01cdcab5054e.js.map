{"version":3,"sources":["assets/script/framework/net/JsonMessage.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\nimport { Message } from \"./Message\";\n\ntype JsonMessageConstructor = typeof JsonMessage;\n\nexport function serialize(key: string, type: JsonMessageConstructor | NumberConstructor | StringConstructor);\nexport function serialize(key: string, type: ArrayConstructor, arrayType: JsonMessageConstructor | NumberConstructor | StringConstructor);\nexport function serialize(key: string, type: MapConstructor, mapKeyType: NumberConstructor | StringConstructor, mapValueType: JsonMessageConstructor | NumberConstructor | StringConstructor);\nexport function serialize(key: string, type, arrTypeOrMapKeyType?, mapValueType?) {\n    return function (target, memberName) {\n        if (Reflect.getOwnPropertyDescriptor(target, '__serialize__') === undefined) {\n            let selfSerializeInfo = {};\n            if (Reflect.getPrototypeOf(target)['__serialize__']) {\n                // 父类拥有序列化信息,并且自己没有序列化信息,则拷贝父类到当前类中来\n                if (Reflect.getOwnPropertyDescriptor(target, '__serialize__') === undefined) {\n                    let parentSerializeInfo = Reflect.getPrototypeOf(target)['__serialize__'];\n                    let serializeKeyList = Object.keys(parentSerializeInfo);\n                    for (let len = serializeKeyList.length, i = 0; i < len; i++) {\n                        selfSerializeInfo[serializeKeyList[i]] = parentSerializeInfo[serializeKeyList[i]].slice(0);\n                    }\n                }\n            }\n            Reflect.defineProperty(target, '__serialize__', {\n                value: selfSerializeInfo,\n            });\n        }\n        if (target['__serialize__'][key]) {\n            throw `SerializeKey has already been declared:${key}`;\n        }\n        target['__serialize__'][key] = [memberName, type, arrTypeOrMapKeyType, mapValueType];\n    }\n}\n\n/**\n * @description JSON的序列化与序列化\n */\nexport class JsonMessage extends Message {\n\n    protected fillData() {\n        // this.data = this.serialize();\n    }\n\n    /**@description 序列化 */\n    private serialize(): any {\n        let result = {};\n        let __serialize__ = Reflect.getPrototypeOf(this)['__serialize__'];\n        if (!__serialize__) return null;\n        let serializeKeyList = Object.keys(__serialize__);\n        for (let len = serializeKeyList.length, i = 0; i < len; i++) {\n            let serializeKey = serializeKeyList[i];\n            let [memberName] = __serialize__[serializeKey];\n            let serializeObj = this.serializeMember(this[memberName]);\n            if (null === serializeObj) {\n                cc.warn(\"Invalid serialize member : \" + memberName);\n            }\n            result[serializeKey] = serializeObj;\n        }\n        return result;\n    }\n\n    /**\n     * @description 序列化成员变量\n     * @param value 该成员变量的值\n     * */\n    private serializeMember(value: any) {\n        if (typeof value == 'number') {\n            return this.serializeNumber(value);\n        } else if (typeof value == 'string') {\n            return this.serializeString(value);\n        } else if (value instanceof Array) {\n            return this.serializeArray(value);\n        } else if (value instanceof Map) {\n            return this.serializeMap(value);\n        } else if (value instanceof JsonMessage) {\n            return value.serialize();\n        } else {\n            cc.warn(\"Invalid serialize value : \" + value);\n            return null;\n        }\n    }\n\n    private serializeNumber(value: Number) {\n        return (value === undefined || value === null) ? '0' : value.toString();\n    }\n\n    private serializeString(value: String) {\n        return (value === undefined || value === null) ? '' : value.toString();\n    }\n\n    private serializeArray(value: Array<any>) {\n        let result = [];\n        value.forEach(element => {\n            result.push(this.serializeMember(element));\n        });\n        return result;\n    }\n\n    private serializeMap(value: Map<any, any>) {\n        let result = [];\n        let self = this;\n        value.forEach((value, key) => {\n            let serVal = { k: self.serializeMember(key), v: self.serializeMember(value) };\n            if (null === serVal.k) {\n                cc.warn(\"Invalid map key!\");\n                serVal.k = '';\n            }\n            if (null === serVal.v) {\n                cc.warn(\"Invalid map value\");\n                serVal.v = '';\n            }\n            result.push(serVal);\n        });\n        return result;\n    }\n\n    decode(data: Uint8Array): boolean {\n        if (super.decode(data)) {\n            super.decode(data)\n            return this.deserialize(this.data);\n        }\n        return false;\n    }\n\n    /**\n     * @description 从json压缩对象信息 反序列化为实体类字段信息\n     * @param data json压缩对象\n     * */\n    private deserialize(data: any) {\n        let __serializeInfo = Reflect.getPrototypeOf(this)['__serialize__'];\n        if (!__serializeInfo) return true;\n        let serializeKeyList = Object.keys(__serializeInfo);\n        for (let len = serializeKeyList.length, i = 0; i < len; i++) {\n            let serializeKey = serializeKeyList[i];\n            let [memberName, memberType, arrOrmapKeyType, mapValType] = __serializeInfo[serializeKey];\n            let iscomplete = this.deserializeMember(memberName, memberType, arrOrmapKeyType, mapValType, data[serializeKey]);\n            if (!iscomplete) {\n                cc.warn(\"Invalid deserialize member :\" + memberName);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @description 反序列化成\n     * @param memberName 成员变量名\n     * @param memberType 成员变量类型\n     * @param arrOrmapKeyType 数组值类型/Map的key类型\n     * @param mapValType Map的值类型\n     * @param value json压缩对象\n     */\n    private deserializeMember(memberName: any, memberType: any, arrOrmapKeyType: any, mapValType: any, value: any) {\n        try {\n            let originValue = this[memberName];\n            if (typeof originValue === 'number') {\n                this[memberName] = this.deserializeNumber(memberName, value);\n            } else if (typeof originValue === 'string') {\n                this[memberName] = this.deserializeString(memberName, value);\n            } else if (originValue instanceof Array) {\n                this.deserializeArray(memberName, arrOrmapKeyType, value);\n            } else if (originValue instanceof Map) {\n                this.deserializeMap(memberName, arrOrmapKeyType, mapValType, value);\n            } else if (originValue instanceof JsonMessage) {\n                originValue.deserialize(value);\n            } else if (null === originValue) {\n                switch (memberType) {\n                    case Number: this[memberName] = this.deserializeNumber(memberName, value); break;\n                    case String: this[memberName] = this.deserializeString(memberName, value); break;\n                    case Array: this[memberName] = [];break;\n                    case Map: this[memberName] = new Map; break;\n                    default: {\n                        this[memberName] = new memberType;\n                        if (this[memberName] instanceof JsonMessage) {\n                            this[memberName].deserialize(value);\n                        } else {\n                            cc.warn(\"Invalid deserialize member :\" + memberName + \" value:\" + originValue);\n                            return false;\n                        }\n                    } break;\n                }\n            } else {\n                cc.warn(\"Invalid deserialize member : \" + memberName + \" value:\" + originValue);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            cc.warn(error.message);\n            this[memberName] = error.data || null;\n            return false;\n        }\n    }\n\n    private deserializeNumber(memberName: any, value: any) {\n        if (value === null || value === undefined || value === NaN) {\n            throw { message: `Invalid deserializeNumber member : ${memberName} value : ${value}`, data: 0 };\n        }\n        return Number(value);\n    }\n\n    private deserializeString(memberName: any, value: any) {\n        if (value === null || value === undefined) {\n            throw { message: `Invalid deserializeString member : ${memberName} value : ${value}`, data: '' };\n        }\n        return value;\n    }\n\n    private deserializeArray(memberName: any, valueType: any, value: any) {\n        if (!(value instanceof Array)) {\n            throw { message: `Invalid deserializeArray member : ${memberName} value : ${value}`, data: [] };\n        }\n        //重新解析，初始化时可能已经赋值，需要先清空对象\n        this[memberName] = [];\n        value.forEach((element, i) => {\n            if (valueType === Number) {\n                this[memberName].push(this.deserializeNumber(memberName + \"[\" + i + \"]\", element));\n            } else if (valueType === String) {\n                this[memberName].push(this.deserializeString(memberName + \"[\" + i + \"]\", element));\n            } else if (valueType === Array) {\n                throw { message: `Invalid deserializeArray member : ${memberName} array value type is Array` };\n            } else if (valueType instanceof Map) {\n                throw { message: `Invalid deserializeArray member : ${memberName} array value type is Map` };\n            } else if (this[memberName] instanceof JsonMessage) {\n                this[memberName].deserialize(element);\n            } else {\n                let elementObj = new valueType;\n                if (elementObj instanceof JsonMessage) {\n                    elementObj.deserialize(element);\n                    this[memberName].push(elementObj);\n                } else {\n                    throw { message: `Invalid deserializeArray member : ${memberName} array value type is ` + valueType };\n                }\n            }\n        });\n    }\n\n    private deserializeMap(memberName: any, keyType: any, valueType: any, value: any) {\n        if (!(value instanceof Array)) {\n            throw { message: `Invalid deserializeMap member : ${memberName} value : ${value}`, data: new Map };\n        }\n        //重新解析，初始化时可能已经赋值，需要先清空对象\n        this[memberName].clear();\n        value.forEach((element, i) => {\n            if (element === null || element.k === undefined || element.k === null || element.v === undefined || element.v === null) {\n                throw { message: `Invalid deserializeMap member : ${memberName} invalid element : ${element}` };\n            }\n\n            let elementKey;\n            if (keyType === Number) {\n                elementKey = this.deserializeNumber(memberName + \"[\" + i + \"]:key\", element.k);\n            } else if (keyType === String) {\n                elementKey = this.deserializeString(memberName + \"[\" + i + \"]:key\", element.k);\n            } else {\n                throw { message: `Invalid deserializeMap member : ${memberName} invalid key type : ${keyType}` };\n            }\n\n            let elementValue;\n            if (valueType === Number) {\n                elementValue = this.deserializeNumber(memberName + \"[\" + i + \"]:value\", element.v);\n            } else if (valueType === String) {\n                elementValue = this.deserializeString(memberName + \"[\" + i + \"]:value\", element.v);\n            } else if (valueType === Array) {\n                throw { message: `Invalid deserializeMap member : ${memberName} invalid value type : Array` };\n            } else if (valueType instanceof Map) {\n                throw { message: `Invalid deserializeMap member : ${memberName} invalid value type : Map` };\n            } else {\n                elementValue = new valueType();\n                if (elementValue instanceof JsonMessage) {\n                    elementValue.deserialize(element.v);\n                } else {\n                    throw { message: `Invalid deserializeMap member : ${memberName} invalid value type : ${valueType}` };\n                }\n            }\n            this[memberName].set(elementKey, elementValue);\n        });\n    }\n}\n"]}