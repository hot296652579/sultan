{"version":3,"sources":["assets/script/framework/net/HttpClient.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\n * @description http网络请求\n */\n\n\nexport enum HttpErrorType {\n    UrlError,//错误的Url地方\n    TimeOut,//超时\n    RequestError,//请求错误\n}\n\nexport interface HttpError {\n    type: HttpErrorType,\n    reason: any\n}\n\nexport enum HttpRequestType {\n    POST = \"POST\",\n    GET = \"GET\",\n}\n\nexport class RequestPackgeData {\n    data: any = null;\n    url: string = null;\n    /**@description 超时设置 默认为10s*/\n    timeout: number = 10000;\n    /**@description 请求类型 默认为GET请求*/\n    type: HttpRequestType = HttpRequestType.GET;\n    requestHeader: { name: string, value: string } = null;\n    /**@description 发送接口时，默认为false 仅浏览器端生效\n     * 自动附加当前时间的参数字段\n     * 但如果服务器做了接口参数效验，可能会导致接口无法通过服务器验证，返回错误数据\n     * @example \n     * 请求地址为http:www.baidu.com 当isAutoAttachCurrentTime 为 true为\n     * 实际的请求接口为http:www.baidu.com?cur_loc_t=当前时间\n     * 请求地址为http:www.baidu.com?uid=123 当isAutoAttachCurrentTime 为 true为\n     * 实际的请求接口为http:www.baidu.com?uid=123&cur_loc_t=当前时间\n     *  */\n    isAutoAttachCurrentTime = false;\n    private _responseType: XMLHttpRequestResponseType = \"\";\n    public set responseType(type: XMLHttpRequestResponseType) {\n        this._responseType = type;\n    }\n    public get responseType() {\n        if (CC_JSB) {\n            if (this._responseType == \"\") {\n                this._responseType = \"json\";\n            }\n        }\n        return this._responseType;\n    }\n}\n\n/**\n * @description http 请求包\n */\nexport class RequestPackge {\n\n    /**@description 跨域代理 */\n    public static crossProxy = {};\n    /**@description 当前主机地址 */\n    public static location = { host: \"\", pathname: \"\", protocol: \"\" };\n\n    private _data: RequestPackgeData = new RequestPackgeData();\n    public set data(data: RequestPackgeData) {\n        this._data = data;\n    }\n    public get data(): RequestPackgeData {\n        return this._data;\n    }\n    /**\n     * @description 发送请求包\n     * @param cb \n     * @param errorcb \n     */\n    public send(cb?: (data: any) => void, errorcb?: (errorData: HttpError) => void) {\n        HttpClient.request(this, cb, errorcb);\n    }\n}\n\nclass HttpClient {\n\n    static crossProxy(url: string): string {\n        //浏览器，非调试模式下\n        if (cc.sys.isBrowser && !CC_PREVIEW && RequestPackge.crossProxy) {\n            let config = RequestPackge.crossProxy;\n            let location = RequestPackge.location;\n            let keys = Object.keys(config);\n\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i];\n                let value = config[key];\n\n                if (url.indexOf(key) > -1) {\n                    if (value.protocol && value.api) {\n                        if (location.protocol != value.protocol) {\n                            //所有跨域的都从当前服务器的代理转发，把https也得转化成http:\n                            url = url.replace(value.protocol, location.protocol);\n                        }\n                        return url.replace(key, `${location.host}/${value.api}`);\n                    }\n                }\n            }\n            return url;\n        } else {\n            return url;\n        }\n    }\n\n    static request(packge: RequestPackge, cb?: (data: any) => void, errorcb?: (errorData: HttpError) => void) {\n\n        let url = packge.data.url;\n        if (!url) {\n            if (CC_DEBUG) {\n                cc.error(`reuqest url error`);\n            }\n            if (errorcb) errorcb({ type: HttpErrorType.UrlError, reason: \"错误的Url地址\" });\n            return;\n        }\n\n        let xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                if ((xhr.status >= 200 && xhr.status < 300)) {\n                    if (xhr.responseType == \"arraybuffer\" || xhr.responseType == \"blob\") {\n                        if (cb) cb(xhr.response);\n                    } else {\n                        if (CC_DEBUG) cc.log(`htpp res(${xhr.responseText})`);\n\n                        if (cb) {\n                            let responText = null;\n                            if (xhr.responseType === \"text\") {\n                                responText = xhr.responseText\n                            } else {\n                                responText = JSON.parse(xhr.responseText);\n                            }\n                            cb(responText);\n                        }\n                    }\n                } else {\n                    let reason = xhr.status;\n                    cc.error(`request error status : ${xhr.status} url : ${url} `);\n                    if (errorcb) errorcb({ type: HttpErrorType.RequestError, reason: reason });\n                }\n            }\n            else {\n                // cc.log(`readyState ${xhr.readyState}`);\n            }\n        };\n\n        xhr.responseType = packge.data.responseType;\n        xhr.timeout = packge.data.timeout;\n        xhr.ontimeout = () => {\n            xhr.abort();//网络超时，断开连接\n            if (CC_DEBUG) cc.warn(`request timeout : ${url}`);\n            if (errorcb) errorcb({ type: HttpErrorType.TimeOut, reason: \"连接超时\" });\n        };\n\n        xhr.onerror = () => {\n            cc.error(`request error : ${url} `);\n            if (errorcb) errorcb({ type: HttpErrorType.RequestError, reason: \"请求错误\" });\n        };\n\n        if (CC_DEBUG) cc.log(`[send http request] url : ${url} request type : ${packge.data.type} , responseType : ${xhr.responseType} data : ${packge.data.data}`);\n\n        // url = this.crossProxy(url);\n\n        if (cc.sys.isBrowser) {\n            if (packge.data.isAutoAttachCurrentTime) {\n                if (url.indexOf(\"?\") >= 0) {\n                    url = `${url}&cur_loc_t=${Date.timeNow()}`;\n                } else {\n                    url = `${url}?cur_loc_t=${Date.timeNow()}`;\n                }\n            }\n        }\n\n        if (cc.sys.isBrowser && !CC_PREVIEW) {\n            if (CC_DEBUG) cc.log(`[send http request] corss prox url : ${url} request type : ${packge.data.type} , responseType : ${xhr.responseType} data : ${packge.data.data}`);\n        }\n\n        if (packge.data.type === HttpRequestType.POST) {\n            xhr.open(HttpRequestType.POST, url);\n            if (packge.data.requestHeader) {\n                xhr.setRequestHeader(packge.data.requestHeader.name, packge.data.requestHeader.value);\n            }\n            else {\n                xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            }\n            xhr.send(packge.data.data);\n        }\n        else {\n            xhr.open(HttpRequestType.GET, url, true);\n            if (packge.data.requestHeader) {\n                xhr.setRequestHeader(packge.data.requestHeader.name, packge.data.requestHeader.value);\n            }\n            xhr.send();\n        }\n    }\n}\n"]}