{"version":3,"sources":["assets/games/wingo/script/data/WingoData.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import BaseData from \"../../../../script/base/BaseData\";\nimport TypeUtils from \"../../../../script/common/utils/TypeUtils\";\nimport AppData from \"../../../../script/data/AppData\";\nimport ClassDecorator from \"../../../../script/framework/decorator/ClassDecorator\";\nimport { MST } from \"../../../../script/framework/external/protoc\";\nimport { WingoDefine } from \"../define/WingoDefine\";\nimport { WingoInterface } from \"../interface/WingoInterface\";\nimport WingoUtils from \"../utils/WingoUtils\";\n\n// 最大历史记录\nconst MAX_HISTORY_COUNT: number = 100;\n// 最大数\nconst MAX_NUM: number = 10;\n\n@ClassDecorator.classname\nexport default class WingoData extends BaseData {\n\n    // 手续费率百分比\n    public cost: number = null;\n    // 当前模式\n    public currMode: MST.WingoMode = null;\n    // 当前待开奖期号\n    public currIssue: number = null;\n    // 历史开奖记录\n    public historyLotteryMap: Map<MST.WingoMode, MST.IWingoHistoryInfo[]> = null;\n    // 开奖信息 Map\n    public lotteryMap: Map<MST.WingoMode, MST.IM2C_WingoLottery_Mes> = null;\n    // 是否首次进入\n    public isFirst: boolean = true;\n    // 是否正在播放开奖动画\n    public isPlayingLotteryAnim: boolean = false;\n    // 个人下注记录\n    public myRecordMap: Map<MST.WingoMode, MST.IWingoMyRecordInfo[]> = null;\n    // 当前处于下拉功能\n    public currPullFunc: WingoDefine.PullBottomFunction = null;\n\n    constructor() {\n        super();\n\n        this.historyLotteryMap = new Map();\n        this.lotteryMap = new Map();\n\n        let wingoModeList: (string | MST.WingoMode)[] = Object.values(MST.WingoMode);\n        for (let k of wingoModeList) {\n            let mode: number = Number(k);\n            let data: MST.IM2C_WingoLottery_Mes = {\n                Mode: mode,\n                LotteryInfo: null,\n                NextTimestamp: 0,\n                NextIssue: null,\n            }\n            this.lotteryMap.set(mode, data);\n        }\n\n    }\n\n    public destroy(): void {\n\n    }\n\n    public initNext(): void {\n\n    }\n\n    /**\n     * 获取最近的历史记录\n     * @returns {MST.IWingoHistoryInfo[]}\n     */\n    private getLatelyList(): MST.IWingoHistoryInfo[] {\n        let historyList: MST.IWingoHistoryInfo[] = null;\n        let historyLotteryList: MST.IWingoHistoryInfo[] = this.historyLotteryMap.get(this.currMode);\n        let historyLen: number = historyLotteryList.length;\n        if (historyLen >= MAX_HISTORY_COUNT) {\n            historyList = historyLotteryList.slice(-MAX_HISTORY_COUNT);\n        } else {\n            historyList = historyLotteryList.slice(-historyLen);\n        }\n        return historyList.reverse();\n    }\n\n    /**\n     * 获取初始填满的统计列表\n     * @returns {number[]}\n     */\n    private getFillStatList(count: number): number[] {\n        let statList: number[] = [];\n        for (let i: number = 0; i < MAX_NUM; ++i) {\n            statList[i] = count;\n        }\n        return statList;\n    }\n\n    /**\n     * 距离上次出现 到现在 有多少局没有出现\n     * @return {number[]}\n     */\n    public getMissing(): number[] {\n        let list: number[] = this.getFillStatList(0);\n        let historyList: MST.IWingoHistoryInfo[] = this.getLatelyList();\n\n        for (let i: number = 0; i < MAX_NUM; ++i) {\n            let missingCount: number = 0;\n            for (let v of historyList) {\n                if (v.Num !== i) {\n                    list[i] = missingCount;\n                    continue;\n                }\n                ++missingCount;\n            }\n        }\n\n        return list;\n    }\n\n    /**\n     * 100 局内平均消失多少局出现一次\n     */\n    public getAvgMissing(): number[] {\n        let historyList: MST.IWingoHistoryInfo[] = this.getLatelyList();\n        let historyLen: number = historyList.length;\n        let list: number[] = this.getFillStatList(historyLen);\n        let frequencyList: number[] = this.getFrequency();\n\n        for (let i: number = 0; i < MAX_NUM; ++i) {\n            let frequencyCount: number = frequencyList[i];\n            let missingCount: number = (historyLen - frequencyCount);\n            list[i] = Math.floor(missingCount / (frequencyCount + 1));\n        }\n\n        return list;\n    }\n\n    /**\n     * 100 局以内 出现的次数\n     */\n    public getFrequency(): number[] {\n        let list: number[] = this.getFillStatList(0);\n        let historyList: MST.IWingoHistoryInfo[] = this.getLatelyList();\n\n        for (let v of historyList) {\n            let count: number = list[v.Num];\n            if (TypeUtils.isNull(count)) {\n                count = 0;\n            }\n            list[v.Num] = ++count;\n        }\n\n        return list;\n    }\n\n    /**\n     * 100 局以内 最大连续出现次数\n     */\n    public getMaxContinued(): number[] {\n        let list: number[] = this.getFillStatList(0);\n        let historyList: MST.IWingoHistoryInfo[] = this.getLatelyList();\n\n        let continuedCount: number = 1;\n        let continuedNum: number = null;\n        for (let v of historyList) {\n            if (v.Num === continuedNum) {\n                ++continuedCount;\n            } else {\n                if (continuedNum !== null) {\n                    let count: number = list[continuedNum];\n                    if (count < continuedCount) {\n                        list[continuedNum] = continuedCount;\n                    }\n                }\n                continuedCount = 1;\n            }\n            continuedNum = v.Num;\n        }\n        return list;\n    }\n\n}"]}