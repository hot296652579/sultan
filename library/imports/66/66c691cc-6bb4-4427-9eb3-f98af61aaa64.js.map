{"version":3,"sources":["assets/script/common/manager/NetManager.ts"],"names":[],"mappings":";;;;;AAAA;;GAEG;;;AAEH,MAAa,UAAU;IAAvB;QACY,YAAO,GAAG,iBAAiB,CAAC;QAG5B,WAAM,GAAW,CAAC,CAAC;QAiDnB,gBAAW,GAAG,EAAE,CAAC;IAC7B,CAAC;IA/CU,MAAM,CAAC,QAAQ;QAClB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;SACrC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,0BAA0B;IACnB,IAAI,CAAC,UAAe;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,UAAU,EAAE;gBACnC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;gBAChE,OAAO;aACV;SACJ;QACD,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;SAC1C;IACL,CAAC;IAEM,iBAAiB,CAAC,IAAa;QAClC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,UAAU,EAAE;gBACZ,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;aACjC;SACJ;IACL,CAAC;IAEM,oBAAoB,CAAC,IAAa;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,UAAU,EAAE;gBACZ,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;aACpC;SACJ;IACL,CAAC;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;IACzB,CAAC;;AAnDL,gCAsDC;AApDkB,oBAAS,GAAe,IAAI,CAAC","file":"","sourceRoot":"/","sourcesContent":["/**\n * @description 全局的网络组件管理\n */\n\nexport class NetManager {\n    private _logTag = `[ActionManager]`;\n    private static _instance: NetManager = null;\n    mainNode: cc.Node;\n    private _seqId: number = 0;\n\n\n    public static Instance() {\n        if (!this._instance) {\n            this._instance = new NetManager();\n        }\n        return this._instance;\n    }\n\n    /**@description 网络控制器添加 */\n    public push(controller: any) {\n        for (let i = 0; i < this.controllers.length; i++) {\n            if (this.controllers[i] == controller) {\n                cc.error(this._logTag, `重复添加${cc.js.getClassName(controller)}`);\n                return;\n            }\n        }\n        console.log(`网络控制器添加${cc.js.getClassName(controller)}`);\n\n        this.controllers.push(controller);\n        if (this.mainNode) {\n            this.mainNode.addComponent(controller);\n        }\n    }\n\n    public addNetControllers(node: cc.Node) {\n        this.mainNode = node;\n        for (let i = 0; i < this.controllers.length; i++) {\n            let controller = this.controllers[i];\n            if (controller) {\n                node.addComponent(controller);\n            }\n        }\n    }\n\n    public removeNetControllers(node: cc.Node) {\n        for (let i = 0; i < this.controllers.length; i++) {\n            let controller = this.controllers[i];\n            if (controller) {\n                node.removeComponent(controller);\n            }\n        }\n    }\n\n    public getNewSeqId(): number {\n        return this._seqId++;\n    }\n\n    private controllers = [];\n}"]}