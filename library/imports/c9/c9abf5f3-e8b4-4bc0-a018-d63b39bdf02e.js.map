{"version":3,"sources":["assets/games/crash/script/utils/CrashUtils.ts"],"names":[],"mappings":";;;;;;;;;AAAA,8FAAsE;AACtE,kGAA0E;AAE1E,+DAA4D;AAG5D,MAAqB,UAAU;IAEpB,MAAM,CAAC,gBAAgB,CAAC,EAAU;QACrC,IAAI,EAAE,IAAI,CAAC,EAAE;YACT,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC5B,OAAO,IAAI,CAAC;SACf;QACD,IAAI,gBAAgB,GAAgC,IAAI,CAAC;QACzD,IAAI,eAAe,GAAgC,iCAAe,CAAC,YAAY,CAAC,iCAAe,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACzH,IAAI,EAAE,GAAG,mBAAS,CAAC,GAAG,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE;YACrD,KAAK,IAAI,CAAC,IAAI,iCAAe,CAAC,YAAY,EAAE;gBACxC,IAAI,mBAAS,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;oBACvC,MAAM;iBACT;qBAAM;oBACH,gBAAgB,GAAG,CAAC,CAAC;iBACxB;aACJ;SACJ;aAAM;YACH,gBAAgB,GAAG,eAAe,CAAC;SACtC;QAED,MAAM;QACN,IAAI,QAAQ,GAAW,mBAAS,CAAC,GAAG,CAAC,mBAAS,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,gBAAgB,CAAC,SAAS,CAAC,CAAC;QAC1F,QAAQ;QACR,IAAI,IAAI,GAAW,gBAAgB,CAAC,IAAI,GAAG,CAAC,gBAAgB,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,gBAAgB,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QAEjK,OAAO,IAAI,CAAC,KAAK,CAAC,qBAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;CAEJ;AA7BD,6BA6BC","file":"","sourceRoot":"/","sourcesContent":["import NumberUtils from \"../../../../script/common/utils/NumberUtils\";\nimport Operation from \"../../../../script/framework/extentions/Operation\";\nimport { UtilMgr } from \"../../../../script/global/UtilMgr\";\nimport { CrashRateDefine } from \"../define/CrashRateDefine\";\nimport { CrashInterface } from \"../interface/CrashInterface\";\n\nexport default class CrashUtils {\n\n    public static getRateByRunTime(ms: number): number {\n        if (ms <= 0) {\n            G.Logger.warn(`倍率负数 ${ms}`);\n            return null;\n        }\n        let currRateInterval: CrashInterface.RateInterval = null;\n        let maxRateInterval: CrashInterface.RateInterval = CrashRateDefine.RateInterval[CrashRateDefine.RateInterval.length - 1];\n        if (ms < Operation.mul(maxRateInterval.startTime, 1000)) {\n            for (let v of CrashRateDefine.RateInterval) {\n                if (Operation.mul(v.startTime, 1000) > ms) {\n                    break;\n                } else {\n                    currRateInterval = v;\n                }\n            }\n        } else {\n            currRateInterval = maxRateInterval;\n        }\n\n        // 剩余秒\n        let residueS: number = Operation.sub(Operation.div(ms, 1000), currRateInterval.startTime);\n        // 计算后倍率\n        let rate: number = currRateInterval.rate + (currRateInterval.move * residueS) + (residueS * (currRateInterval.append + (currRateInterval.append * residueS))) / 2\n\n        return Math.floor(NumberUtils.converToS(rate));\n    }\n\n}"]}