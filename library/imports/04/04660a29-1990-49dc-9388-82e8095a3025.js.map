{"version":3,"sources":["assets/script/framework/base/Service.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ServerConnector } from \"../net/ServerConnector\";\nimport { EventApi } from \"../event/EventApi\";\nimport { makeKey } from \"../decorator/Decorators\";\nimport { Message } from \"../net/Message\";\nimport { Manager } from \"../Framework\";\nimport { CommonMessage } from \"../../common/net/CommonService\";\nimport PanelHelp from \"../../msgbox/PanelHelp\";\nimport { MST } from \"../external/protoc\";\nimport AppData from \"../../data/AppData\";\nimport Operation from \"../extentions/Operation\";\n/**\n * @description 与服务器之间消息收发基类,注册消息并转发\n */\n\n/** @description 处理函数声明 handleType 为你之前注册的handleType类型的数据 返回值number 为处理函数需要的时间 */\nexport type MessageHandleFunc = (handleTypeData: any) => number;\n\nexport interface ProtoListenerData {\n    mainCmd: number, // main cmd\n    func: MessageHandleFunc, //处理函数\n    type: typeof Message, //解包类型\n    isQueue: boolean,//是否进入消息队列，如果不是，收到网络消息返回，会立即回调处理函数\n    data?: any, //解包后的数据\n    target?: any, //处理者\n}\n\nexport class Service extends ServerConnector {\n\n    /**@description 公共的消息解析类型，必须包含对消息码的解析与打包 */\n    protected get commonMessageType(): typeof Message {\n        return Message;\n    }\n\n    /**\n     * @description 发送心跳\n     */\n    protected sendHeartbeat() {\n        super.sendHeartbeat();\n    }\n    /**\n     * @description 获取最大心跳超时的次数\n     */\n    protected getMaxHeartbeatTimeOut(): number {\n        return super.getMaxHeartbeatTimeOut();\n    }\n    /**\n     * @description 心跳超时\n     */\n    protected onHeartbeatTimeOut() {\n        super.onHeartbeatTimeOut();\n    }\n    /**\n     * @description 是否为心跳消息\n     */\n    protected isHeartBeat(data: Message): boolean {\n        return super.isHeartBeat(data);\n    }\n\n    protected onOpen() {\n        super.onOpen();\n        this.stopSendLoadingHart();\n        dispatch(EventApi.NetEvent.ON_OPEN);\n    }\n    protected onClose(ev: Event) {\n        super.onClose(ev);\n        this.stopSendLoadingHart();\n        dispatch(EventApi.NetEvent.ON_CLOSE, ev);\n    }\n    protected onError(ev: Event) {\n        super.onError(ev);\n        this.stopSendLoadingHart();\n        dispatch(EventApi.NetEvent.ON_ERROR, ev);\n    }\n    protected onMessage(data: Uint8Array) {\n\n        //先对包信进行解析\n        let msg = new this.commonMessageType();\n        if (!msg.decode(data)) {\n            cc.error(`包信进行解析 error`);\n            return;\n        }\n        super.onMessage(data);\n        if (this.isHeartBeat(msg)) {\n            //心跳消息，路过处理，应该不会有人注册心跳吧\n            let pingData: MST.G2C_Ping_Res = msg.data;\n            let appData = G.DataMgr.get(AppData);\n            appData.timeDifference = Operation.sub(Number(pingData.Time), Date.now());\n            console.log(`收到网络消息 main cmd : ${msg.mainCmd} 时间差 ${appData.timeDifference}`);\n            return;\n        }\n\n        G.Logger.color(`接收消息：`, `${msg.mainCmd}`);\n        G.Logger.log(msg.data);\n        this.stopSendLoadingHart(null, msg.mainCmd);\n        let key = makeKey(msg.mainCmd);\n\n        if (this.onlyServerSendMsg(msg)) {\n            cc.log(`服务器主动下发: ${msg.mainCmd}`);\n            return;\n        }\n        if (!this._listeners[key]) {\n            cc.warn(`no find listener data main cmd : ${msg.mainCmd}`);\n            return;\n        }\n        if (this._listeners[key].length <= 0) {\n            return;\n        }\n        let listenerDatas = this._listeners[key];\n        let queueDatas = [];\n\n        for (let i = 0; i < listenerDatas.length; i++) {\n            //预先存储的解析类型 //同一个命令使用同一类类型\n            let obj: Message = null;\n            if (listenerDatas[i].type) {\n                obj = new listenerDatas[i].type();\n                //解包\n                obj.decode(data);\n            } else {\n                //把数据放到里面，让后面使用都自己解析\n                obj = msg;\n            }\n\n            if (listenerDatas[i].isQueue) {\n                //需要加入队列处理\n                queueDatas.push(this.copyListenerData(listenerDatas[i], obj));\n            }\n            else {\n                //不需要进入队列处理\n                try {\n                    listenerDatas[i].func && listenerDatas[i].func.call(listenerDatas[i].target, obj.data.data);\n                } catch (error) {\n                    cc.error(error);\n                }\n\n            }\n        }\n\n        if (queueDatas.length > 0) {\n            this._masseageQueue.push(queueDatas);\n        }\n    }\n\n    /** 监听集合*/\n    private _listeners: { [key: string]: ProtoListenerData[] } = {};\n\n    /** 消息处理队列 */\n    private _masseageQueue: Array<ProtoListenerData[]> = new Array<ProtoListenerData[]>();\n\n    /** 是否正在处理消息 ，消息队列处理消息有时间，如执行一个消息需要多少秒后才执行一下个*/\n    private _isDoingMessage: boolean = false;\n\n    /** @description 可能后面有其它特殊需要，特定情况下暂停消息队列的处理, true为停止消息队列处理 */\n    private _isPause: boolean = false;\n\n    /**\n     * @description 暂停消息队列消息处理\n     */\n    public pauseMessageQueue() {\n        this._isPause = true;\n    }\n\n    /**\n     * @description 恢复消息队列消息处理\n     */\n    public resumeMessageQueue() {\n        this._isPause = false;\n    }\n    /**\n     * @description 删除消息队列消息处理\n     */\n    public removeMessageQueue(len = 3) {\n        if (this._masseageQueue.length == 0) return;\n        // G.Logger.log('队列消息处理',this._masseageQueue.length);\n        //消息队列太多 只处理最近len 个\n        if (this._masseageQueue.length > len) {\n            this._masseageQueue.splice(0, this._masseageQueue.length - len);\n        }\n\n    }\n\n    /**\n     * @description 添加服务器数据监听\n     * @param mainCmd main command\n     * @param handleType 处理类型，指你用哪一个类来进行解析数据\n     * @param handleFunc 处理回调\n     * @param isQueue 是否进入消息队列\n     */\n    public addListener(\n        mainCmd: number,\n        handleType: any,\n        handleFunc: MessageHandleFunc,\n        isQueue: boolean,\n        target: any) {\n        let key = makeKey(mainCmd);\n        if (this._listeners[key]) {\n            let hasSame = false;\n            for (let i = 0; i < this._listeners[key].length; i++) {\n                if (this._listeners[key][i].target === target) {\n                    hasSame = true;\n                    break;\n                }\n            }\n            if (hasSame) {\n                return;\n            }\n            this._listeners[key].push({\n                mainCmd: mainCmd,\n                func: handleFunc,\n                type: handleType,\n                isQueue: isQueue,\n                target: target\n            });\n        }\n        else {\n            this._listeners[key] = [];\n            this._listeners[key].push({\n                mainCmd: mainCmd,\n                func: handleFunc,\n                type: handleType,\n                isQueue: isQueue,\n                target: target\n            });\n        }\n    }\n\n    public removeListeners(target: any, mainCmd?: number) {\n\n        if (mainCmd) {\n            let self = this;\n            Object.keys(this._listeners).forEach((value) => {\n                let datas = self._listeners[value];\n                let i = datas.length;\n                while (i--) {\n                    if (datas[i].target == target && datas[i].mainCmd == mainCmd) {\n                        datas.splice(i, 1);\n                    }\n                }\n                if (datas.length == 0) {\n                    delete self._listeners[value];\n                }\n            });\n\n            //移除网络队列中已经存在的消息\n            let i = this._masseageQueue.length;\n            while (i--) {\n                let datas = this._masseageQueue[i];\n                let j = datas.length;\n                while (j--) {\n                    if (datas[j].target == target && datas[j].mainCmd == mainCmd) {\n                        datas.splice(j, 1);\n                    }\n                }\n                if (datas.length == 0) {\n                    this._masseageQueue.splice(i, 1);\n                }\n            }\n\n        } else {\n            let self = this;\n            Object.keys(this._listeners).forEach((value: string, index: number, arr: string[]) => {\n                let datas = self._listeners[value];\n\n                let i = datas.length;\n                while (i--) {\n                    if (datas[i].target == target) {\n                        datas.splice(i, 1);\n                    }\n                }\n\n                if (datas.length == 0) {\n                    delete self._listeners[value];\n                }\n            })\n\n            //移除网络队列中已经存在的消息\n            let i = this._masseageQueue.length;\n            while (i--) {\n                let datas = this._masseageQueue[i];\n                let j = datas.length;\n                while (j--) {\n                    if (datas[j].target == target) {\n                        datas.splice(j, 1);\n                    }\n                }\n                if (datas.length == 0) {\n                    this._masseageQueue.splice(i, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * @description 发送请求\n     * @param msg msg\n     */\n    public send(msg) {\n        //发送请求数据\n        if (msg.encode()) {\n            super.send(msg);\n            this.startSendLoadingHart(msg.mainCmd);\n        } else {\n            cc.error(`encode error`);\n        }\n        // super.send(msg);\n    }\n\n    /**\n     * @description 复制proto协议监听数据\n     * @param input \n     * @param data \n     */\n    private copyListenerData(input: ProtoListenerData, data: any): ProtoListenerData {\n        return {\n            mainCmd: input.mainCmd,\n            type: input.type,\n            func: input.func,\n            isQueue: input.isQueue,\n            data: data,\n            target: input.target\n        };\n    }\n\n    /**\n     * @description 消息队列处理，由框架调用\n     */\n    public handMessage() {\n\n        //如果当前暂停了消息队列处理，不再处理消息队列\n        if (this._isPause) return;\n\n        //如果当前有函数正在处理\n        if (this._isDoingMessage) return;\n        //如果当前执行队列为空\n        if (this._masseageQueue.length == 0) return;\n\n        let datas = this._masseageQueue.shift();\n        if (datas == undefined) return;\n        if (datas.length == 0) return;\n\n        this._isDoingMessage = true;\n        let handleTime = 0;\n        for (let i = 0; i < datas.length; i++) {\n            let data = datas[i];\n            if (data.func instanceof Function) {\n                try {\n                    let tempTime = data.func.call(data.target, data.data.data);\n                    if (typeof tempTime == \"number\") {\n                        handleTime = Math.max(handleTime, tempTime);\n                    }\n                } catch (error) {\n                    cc.error(error);\n                }\n            }\n        }\n\n        if (handleTime == 0) {\n            //立即进行处理\n            this._isDoingMessage = false;\n        }\n        else {\n            Manager.uiManager.getCanvasComponent().scheduleOnce(() => {\n                this._isDoingMessage = false;\n            }, handleTime);\n        }\n    }\n\n    /**\n     * @description 重置\n     */\n    public reset() {\n        this._isDoingMessage = false;\n        this._listeners = {};\n        this._masseageQueue = [];\n        this.resumeMessageQueue();\n    }\n\n    public close() {\n\n        //清空消息处理队列\n        this._masseageQueue = [];\n        this._isDoingMessage = false;\n        //不能恢复这个队列，可能在重新连接网络时，如游戏的Logic层暂停掉了处理队列去加载资源，期望加载完成资源后再恢复队列的处理\n        //this.resumeMessageQueue();\n        super.close();\n    }\n    /**\n     * 服务器主动下发\n     */\n    onlyServerSendMsg(msg) {\n        return false;\n    }\n\n    //处理loading界面\n    private _sendLoadingHart: Map<string, NodeJS.Timeout> = new Map();\n    private _LoadingTime = 10000;\n    // private startLoadingMsgIDMap: Map<number, number> = new Map();\n    private startLoadingMsgIDMap = {\n        \"3002_1002\": \"3002_1003\", \"3001_10001\": \"3001_10001\", \"3012_1002\": \"3012_1003\", \"3004_1002\": \"3004_1003\"\n        , \"3015_1002\": \"3015_1003\", \"3016_1001\": \"3016_1002\", \"3018_1003\": \"3018_1004\", \"3020_10001\": \"3020_10001\"\n    };\n    private startSendLoadingHart(mainCmd) {\n        let key = mainCmd;\n        //判断 key是否在startLoadingMsgIDMap中\n        if (this.isKey(key)) {\n            // console.log(\" this._sendLoadingHart\", this._sendLoadingHart, key);\n            this.stopSendLoadingHart(key, null);\n            this._sendLoadingHart[key] = setInterval(() => {\n                this.stopSendLoadingHart(key, null);\n                PanelHelp.hideLoading();\n            }, this._LoadingTime);\n        }\n    }\n\n    private isKey(key): boolean {\n        for (const k in this.startLoadingMsgIDMap) {\n            if (k == key) return true;\n        }\n        return false\n    }\n\n    private isValue(value): string {\n        for (const k in this.startLoadingMsgIDMap) {\n            if (this.startLoadingMsgIDMap[k] == value) return k;\n        }\n        return null;\n    }\n    public stopSendLoadingHart(key = null, value = null) {\n        if (key == null && value == null) {//socket关闭了 清掉所有的定时器\n            for (const k in this._sendLoadingHart) {\n                clearInterval(this._sendLoadingHart[k]);\n                delete this._sendLoadingHart[k];\n            }\n            this._sendLoadingHart.clear();\n        } else if (key) {//根据Key清理\n            if (Object.keys(this._sendLoadingHart).length != 0 && this._sendLoadingHart[key]) {\n                clearInterval(this._sendLoadingHart[key]);\n                delete this._sendLoadingHart[key];\n            }\n        } else {//根据vulue找到Key清理\n            let k = this.isValue(value);\n            if (k) {\n                if (Object.keys(this._sendLoadingHart).length != 0 && this._sendLoadingHart[k]) {\n                    clearInterval(this._sendLoadingHart[k]);\n                    delete this._sendLoadingHart[k];\n                }\n            }\n        }\n    }\n}\n"]}