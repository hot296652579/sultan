{"version":3,"sources":["assets/script/turntable/HelpView.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,6DAA0D;AAE1D,kEAAkE;AAClE,oEAA4C;AAE5C,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,UAAU,CAAC;AAI5C,IAAqB,QAAQ,GAA7B,MAAqB,QAAS,SAAQ,gBAAM;IAA5C;;QAKI,aAAQ,GAAgB,IAAI,CAAC;IA2CjC,CAAC;IAxCU,MAAM,CAAC,YAAY;QACtB,OAAO,2BAA2B,CAAC;IACvC,CAAC;IACD,MAAM;QACF,KAAK,CAAC,MAAM,EAAE,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IAEvD,CAAC;IAED,KAAK;QACD,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;SACpC;IAEL,CAAC;IAED,IAAI,CAAC,IAAI;QACL,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;YACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;SACvB;IACL,CAAC;IAGD,aAAa;QACT,KAAK,CAAC,aAAa,EAAE,CAAC;IAE1B,CAAC;IAED,OAAO,CAAC,IAAI,EAAE,IAAI;QACd,QAAQ,IAAI,EAAE;YACV,KAAK,OAAO;gBAAE,IAAI,CAAC,eAAe,EAAE,CAAC;gBAAC,MAAM;YAC5C,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;SAC9D;IACL,CAAC;IAED,SAAS;QACL,KAAK,CAAC,SAAS,EAAE,CAAC;IACtB,CAAC;CACJ,CAAA;AA3CG;IADC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC;0CACO;AALZ,QAAQ;IAF5B,OAAO;IACP,0BAAa,CAAC,2BAAY,CAAC,QAAQ,CAAC;GAChB,QAAQ,CAgD5B;kBAhDoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["\nimport { LobbyService } from \"../common/net/LobbyService\";\nimport { IController } from \"../framework/controller/Controller\";\nimport { injectService } from \"../framework/decorator/Decorators\";\nimport UIView from \"../framework/ui/UIView\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\n@injectService(LobbyService.instance)\nexport default class HelpView extends UIView implements IController<LobbyService> {\n\n    service: LobbyService;\n\n    @property(cc.RichText)\n    str_rule: cc.RichText = null;\n\n    rule: string;\n    public static getPrefabUrl() {\n        return \"turntable/prefab/HelpView\";\n    }\n    onLoad() {\n        super.onLoad();\n        this.content = this.node.getChildByName('content');\n\n    }\n\n    start() {\n        if (this.rule) {\n            this.str_rule.string = this.rule;\n        }\n\n    }\n\n    show(args) {\n        super.show(args);\n        this.showWithAction(true);\n        if (args && args[0]) {\n            this.rule = args[0];\n        }\n    }\n\n\n    bindingEvents() {\n        super.bindingEvents();\n\n    }\n\n    onClick(name, node) {\n        switch (name) {\n            case \"close\": this.closeWithAction(); break;\n            default: G.Logger.error(\"no find button name -> %s\", name);\n        }\n    }\n\n    onDestroy() {\n        super.onDestroy();\n    }\n}\n"]}